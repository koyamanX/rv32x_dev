#include "opcode.h"
#include "rv32x_integration.h"
#include "uart_receiver.h"
#include "uart_sender.h"
#include "fifo_8_8.h"
#include "mmcspi_slave.h"

declare debug_uart_sender {
	input addr[10];
	input wdata[32];
	output rdata[32];
	output TXD;
	func_in read(addr) : rdata;
	func_in write(addr, wdata);
	func_out ready();
	func_in reset();
	func_out done();
}


declare rv32x_simulation simulation {
	func_in reset();
	input inst[32];
	input rdata[32];
	output wdata[32];
	output daddr[32];
	output iaddr[32];
	output ibyteen[3];
	output dbyteen[3];
	func_in dmem_ready;
	func_in imem_ready;
	func_out imem_read(iaddr, ibyteen);  
	func_out dmem_read(daddr, dbyteen);  
	func_out dmem_write(daddr, dbyteen, wdata); 
	input block_data[4096];
	output write_block_data[4096];
	output block_adrs[32];
	func_in block_data_valid();
	func_out read_block(block_adrs);
	func_out write_block(block_adrs,write_block_data);
	output head[32];
    output tail[32];
    output excnt[4];
    output exclusion[512];
	output erase_group_en;
    func_out erase(head, tail, excnt, exclusion, erase_group_en);
	output uart_data[8];
	func_out uart_done();
	input uart_wdata[8];
	func_in uart_write(uart_wdata);

#ifdef HTIF
	output tohost[32];
	func_out sim_done(tohost);
#endif
}

module rv32x_simulation {
	reg card_clk;
	reg buffer;

	rv32x_integration core;
	uart_receiver ur;
	debug_uart_sender us;	/* same as uart_sender.nsl except for status.en is 1 at reset */
	mmcspi_slave mmcsim;
	
	ur.RXD = core.TXD;
	core.RXD = us.TXD;
	mmcsim.m_clock = card_clk;
	mmcsim.SCLK = core.SCLK;
	mmcsim.CS = core.CS;
	mmcsim.MOSI = core.MOSI;
	buffer := mmcsim.MISO;
	core.MISO = buffer;

	card_clk := core.SCLK;
	core.mmc_clk = m_clock;

	func ur.done {
		uart_done();
		uart_data = ur.received_char;
		ur.read(10'(0x0));
		_write("%c", ur.received_char);
	}
	func reset {
		//core.reset(0x00000000);
		core.reset();
		ur.write(10'(0x4), 1);
		ur.reset();
		us.reset();
	}
	func uart_write {
		us.write(10'(0x0), 32'(uart_wdata));
	}
	func core.imem_read {
		imem_read(core.iaddr, core.ibyteen);
	}
	func core.dmem_read {
		dmem_read(core.daddr, core.dbyteen);
	}
	func core.dmem_write {
		dmem_write(core.daddr, core.dbyteen, core.wdata);
	}
	func imem_ready {
		core.inst = inst;
		core.imem_ready();
	}
	func dmem_ready {
		core.rdata = rdata;
		core.dmem_ready();
	}
	func mmcsim.read {
		read_block(mmcsim.adrs);
	}
	func mmcsim.write{
		write_block(mmcsim.adrs, mmcsim.write_block_data);
	}
	func mmcsim.erase{
		erase(mmcsim.head, mmcsim.tail, mmcsim.excnt, mmcsim.exclusion, mmcsim.erase_group_en);
	}
	func block_data_valid {
		mmcsim.block_data_valid();
		mmcsim.read_block_data = block_data;
	}
#ifdef HTIF
	func core.sim_done {
		sim_done(core.tohost);
	}
#endif
}
module debug_uart_sender {
	reg buffer[8];
	reg readbuffer[8];
	reg cnt[32] = 0;
	reg txd = 1;
	reg idx[3] = 0;
	fifo_8_8 fifo;
	proc_name idle();
	proc_name send_start_bit(buffer);
	proc_name send_data_bit(buffer);
	proc_name send_stop_bit;
	uart_tx_stat_t reg status = 1;

	TXD = txd;
	status.empty := fifo.empty;
	status.full := fifo.full;

	func reset {
		idle();
	}
	proc idle {
		if(status.en && ~status.busy && ~fifo.empty) {
			status.busy := 1;
			send_start_bit(fifo.read());	
			readbuffer := fifo.rdata;
		}
	}
	proc send_start_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			cnt := 0;
			send_data_bit(buffer);
		} else {
			cnt++;
		}
		txd := 0;
	}
	proc send_data_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			if(idx == 7) {
				send_stop_bit();
				idx := 0;
			} else {
				idx++;
			}
			cnt := 0;
		} else {
			cnt++;
		}
		txd := buffer[idx];
	}
	proc send_stop_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			idle();
			done();
			status.busy := 0;
			cnt := 0;
		} else {
			cnt++;
		}
		txd := 1;
	}
	
	func read {
		any {
			addr == 10'(0x0): return 32'(readbuffer);
			addr == 10'(0x4): return 32'(status);
		}
		ready();
	}
	func write {
		any {
			addr == 10'(0x0): fifo.write(wdata[7:0]);
			addr == 10'(0x4): status.en := wdata[0];
		}
		ready();
	}
}
