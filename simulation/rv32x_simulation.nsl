#include "opcode.h"
#include "rv32x_integration.h"
#include "uart_receiver.h"
#include "uart_sender.h"
#include "fifo_8_8.h"
#include "sdspi_slave.h"

declare debug_uart_sender {
	input addr[10];
	input wdata[32];
	output rdata[32];
	output TXD;
	func_in read(addr) : rdata;
	func_in write(addr, wdata);
	func_out ready();
	func_in reset();
	func_out done();
}


declare rv32x_simulation simulation {
	func_in reset();
	input inst[32];
	input rdata[32];
	output wdata[32];
	output daddr[32];
	output iaddr[32];
	output ibyteen[3];
	output dbyteen[3];
	func_in dmem_ready;
	func_in imem_ready;
	func_out imem_read(iaddr, ibyteen);  
	func_out dmem_read(daddr, dbyteen);  
	func_out dmem_write(daddr, dbyteen, wdata); 
	input block_data[4096];
	output block_adrs[32];
	func_in block_data_valid();
	func_out read_block(block_adrs);
#ifdef DEBUG
	output uart_data[8];
	func_out uart_done();
	input uart_wdata[8];
	func_in uart_write(uart_wdata);
	output tohost[32];
	func_out sim_done(tohost);
	output debug_x0[32];
	output debug_x1[32];
	output debug_x2[32];
	output debug_x3[32];
	output debug_x4[32];
	output debug_x5[32];
	output debug_x6[32];
	output debug_x7[32];
	output debug_x8[32];
	output debug_x9[32];
	output debug_x10[32];
	output debug_x11[32];
	output debug_x12[32];
	output debug_x13[32];
	output debug_x14[32];
	output debug_x15[32];
	output debug_x16[32];
	output debug_x17[32];
	output debug_x18[32];
	output debug_x19[32];
	output debug_x20[32];
	output debug_x21[32];
	output debug_x22[32];
	output debug_x23[32];
	output debug_x24[32];
	output debug_x25[32];
	output debug_x26[32];
	output debug_x27[32];
	output debug_x28[32];
	output debug_x29[32];
	output debug_x30[32];
	output debug_x31[32];
    output debug_pc[32];
	output debug_retire_inst[32];
	output debug_retire_pc[32];
	func_out debug_retire(debug_retire_pc, debug_retire_inst);
	output debug_wb_rd[5];
	output debug_wb_data[32];
	func_out debug_wb(debug_wb_rd, debug_wb_data);
	output debug_csr_write_num[12];
	output debug_csr_write_data[32];
	func_out debug_csr_write(debug_csr_write_num, debug_csr_write_data);
	output debug_mem_adrs[32];
	output debug_mem_data[32];
	output debug_mem_byteen[3];
	func_out debug_mem_write(debug_mem_adrs, debug_mem_byteen, debug_mem_data);
	output debug_cause[32];
	output debug_epc[32];
	output debug_mtval[32];
	output debug_inst[32];
	func_out debug_raise_exception(debug_cause, debug_epc, debug_mtval, debug_inst);
	input funcname[128];
	//func_in debug_disp_funcname(funcname);
#endif
}

module rv32x_simulation {
	rv32x_integration core;
	uart_receiver ur;
	debug_uart_sender us;	/* same as uart_sender.nsl except for status.en is 1 at reset */
	sdspi_slave sdsim;
	
	ur.RXD = core.TXD;
	core.RXD = us.TXD;
	sdsim.SCLK = core.SCLK;
	sdsim.CS = core.CS;
	sdsim.MOSI = core.MOSI;
	core.MISO = sdsim.MISO;

	func ur.done {
		uart_done();
		uart_data = ur.received_char;
		ur.read(10'(0x0));
		_write("%c", ur.received_char);
	}
	func reset {
		//core.reset(0x00000000);
		core.reset();
		ur.write(10'(0x4), 1);
		ur.reset();
		us.reset();
	}
	func uart_write {
		us.write(10'(0x0), 32'(uart_wdata));
	}
	func core.imem_read {
		imem_read(core.iaddr, core.ibyteen);
	}
	func core.dmem_read {
		dmem_read(core.daddr, core.dbyteen);
	}
	func core.dmem_write {
		dmem_write(core.daddr, core.dbyteen, core.wdata);
	}
	func imem_ready {
		core.inst = inst;
		core.imem_ready();
	}
	func dmem_ready {
		core.rdata = rdata;
		core.dmem_ready();
	}
	func sdsim.read {
		read_block(sdsim.adrs);
	}
	func block_data_valid {
		sdsim.block_data_valid();
		sdsim.read_block_data = block_data;
	}
#ifdef DEBUG
	func core.sim_done {
		sim_done(core.tohost);
	}
	debug_x0  = core.debug_x0;
	debug_x1  = core.debug_x1;
	debug_x2  = core.debug_x2;
	debug_x3  = core.debug_x3;
	debug_x4  = core.debug_x4;
	debug_x5  = core.debug_x5;
	debug_x6  = core.debug_x6;
	debug_x7  = core.debug_x7;
	debug_x8  = core.debug_x8;
	debug_x9  = core.debug_x9;
	debug_x10 = core.debug_x10;
	debug_x11 = core.debug_x11;
	debug_x12 = core.debug_x12;
	debug_x13 = core.debug_x13;
	debug_x14 = core.debug_x14;
	debug_x15 = core.debug_x15;
	debug_x16 = core.debug_x16;
	debug_x17 = core.debug_x17;
	debug_x18 = core.debug_x18;
	debug_x19 = core.debug_x19;
	debug_x20 = core.debug_x20;
	debug_x21 = core.debug_x21;
	debug_x22 = core.debug_x22;
	debug_x23 = core.debug_x23;
	debug_x24 = core.debug_x24;
	debug_x25 = core.debug_x25;
	debug_x26 = core.debug_x26;
	debug_x27 = core.debug_x27;
	debug_x28 = core.debug_x28;
	debug_x29 = core.debug_x29;
	debug_x30 = core.debug_x30;
	debug_x31 = core.debug_x31;
	debug_pc = core.debug_pc;
	func core.debug_retire {
		debug_retire(core.debug_retire_pc, core.debug_retire_inst);
	}
	func core.debug_wb {
		debug_wb(core.debug_wb_rd, core.debug_wb_value);
	}
	func core.debug_csr_write {
		debug_csr_write(core.debug_csr_write_num, core.debug_csr_write_data);
	}
	func core.debug_mem_write {
		debug_mem_write(core.debug_mem_adrs, core.debug_mem_byteen, core.debug_mem_data);
	}
	func core.debug_raise_exception {
		debug_raise_exception(core.debug_cause, core.debug_epc, core.debug_mtval, core.debug_inst);
	}
#endif
}
module debug_uart_sender {
	reg buffer[8];
	reg readbuffer[8];
	reg cnt[32] = 0;
	reg txd = 1;
	reg idx[3] = 0;
	fifo_8_8 fifo;
	proc_name idle();
	proc_name send_start_bit(buffer);
	proc_name send_data_bit(buffer);
	proc_name send_stop_bit;
	uart_tx_stat_t reg status = 1;

	TXD = txd;
	status.empty := fifo.empty;
	status.full := fifo.full;

	func reset {
		idle();
	}
	proc idle {
		if(status.en && ~status.busy && ~fifo.empty) {
			status.busy := 1;
			send_start_bit(fifo.read());	
			readbuffer := fifo.rdata;
		}
	}
	proc send_start_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			cnt := 0;
			send_data_bit(buffer);
		} else {
			cnt++;
		}
		txd := 0;
	}
	proc send_data_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			if(idx == 7) {
				send_stop_bit();
				idx := 0;
			} else {
				idx++;
			}
			cnt := 0;
		} else {
			cnt++;
		}
		txd := buffer[idx];
	}
	proc send_stop_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			idle();
			done();
			status.busy := 0;
			cnt := 0;
		} else {
			cnt++;
		}
		txd := 1;
	}
	
	func read {
		any {
			addr == 10'(0x0): return 32'(readbuffer);
			addr == 10'(0x4): return 32'(status);
		}
		ready();
	}
	func write {
		any {
			addr == 10'(0x0): fifo.write(wdata[7:0]);
			addr == 10'(0x4): status.en := wdata[0];
		}
		ready();
	}
}
