#include "rv32x_core.h"
#include "rv32x5p.h"
#include "opcode.h"
#include "priv.h"
#include "csr.h"
#include "csr_map.h"
#include "icache_unit.h"
#include "dcache_unit.h"

#define INIT_MTVEC {30'b00000_00000_00000_00000_00000_00000, MTVEC_MODE_DIRECT}
#define MISA_EXTENSIONS MISA_EXTENSIONS_I|MISA_EXTENSIONS_M

module rv32x_core {
	rv32x5p rv32x;							/* 5-stage pipelined processor(single issue, in-order) */
	icache_unit ic;
	dcache_unit dc;
	reg ic_invalidate_done = 0;
	reg dc_flush_done = 0;
	reg mode[2];							/* Current execution mode */
	
	wire ncadrs[32];
	wire ncbyteen[3];
	wire ncdata[32];
	func_self noncacheable_read(ncadrs, ncbyteen);
	func_self noncacheable_write(ncadrs, ncbyteen, ncdata);
	
	/* Trap */
	reg cause[32];
	reg epc[32];
	reg interrput_servicing = 0;						/* interrupt occuries */
	proc_name mtrap(cause, epc);
	proc_name mtrap_ret();
	/* Interrupt */
	func_self interrupt();
	func_self interrupt_enabled();
	func_self timer_interrupt_pending();
	func_self software_interrupt_pending();
	func_self external_interrupt_pending();
	/* Exceptions */
	func_self exception();
	func_self instruction_address_breakpoint_exception();
	func_self instruction_page_fault_exception();
	func_self instruction_access_fault_exception();
	func_self illegal_instruction_exception();
	func_self instruction_address_misaligned_exception();
	func_self environment_call_exception();
	func_self environment_break_exception();
	func_self load_store_amo_address_breakpoint_exception();
	func_self store_amo_address_misaligned_exception();
	func_self load_address_misaligned_exception();
	func_self store_amo_page_fault_exception();
	func_self load_page_fault_exception();
	func_self store_amo_access_fault_exception();
	func_self load_access_fault_exception();

	func_self instruction_address_breakpoint();
	func_self instruction_page_fault();
	func_self instruction_access_fault();
	func_self illegal_instruction();
	func_self instruction_address_misaligned();
	func_self environment_call();
	func_self environment_break();
	func_self load_store_amo_address_breakpoint();
	func_self store_amo_address_misaligned();
	func_self load_address_misaligned();
	func_self store_amo_page_fault();
	func_self load_page_fault();
	func_self store_amo_access_fault();
	func_self load_access_fault();
	func_self timer_interrupt();
	func_self external_interrupt();
	func_self software_interrupt();

	wire cwadrs[32];
	wire cwdata[32];
	func_self csr_write(cwadrs, cwdata);
	wire cradrs[32];
	wire crdata[32];
	func_self csr_read(cradrs) : crdata;
	func_self csr_read_not_mapped();
	func_self csr_write_not_mapped();
	func_self misaligned();
#ifdef DEBUG
	reg debug_einst[32];
#endif


	/* CSRs */
	mvendorid_t reg mvendorid		= 0;
	marchid_t reg marchid			= 0;
	mimpid_t reg mimpid				= 0;
	mhartid_t reg mhartid			= 0;
	mstatus_t reg mstatus			= 0;
	mstatush_t reg mstatush			= 0;
	mtvec_t reg mtvec 				= INIT_MTVEC;
	mscratch_t reg mscratch			= 0;
	mepc_t reg mepc					= 0;
	mcause_t reg mcause 			= RESET;
	mtval_t reg mtval				= 0;
	misa_t reg misa					= 0;
	mie_t reg mie					= 0;
	mip_t reg mip					= 0;
	mideleg_t reg mideleg			= 0;
	medeleg_t reg medeleg			= 0;
	reg msip 						= 0;
	reg mtip 						= 0;
	reg meip 						= 0;
	reg usip						= 0;
	reg utip						= 0;
	reg ueip						= 0;

	ustatus_t reg ustatus			= 0;
	uie_t reg uie					= 0;
	utvec_t reg utvec				= 0;
	uscratch_t reg uscratch			= 0;
	uepc_t reg uepc					= 0;
	ucause_t reg ucause				= 0;
	utval_t reg utval 				= 0;
	uip_t reg uip					= 0;

	wire sxlen[2];
	wire uxlen[2];
	wire ialign[2];
	
	sxlen = MISA_MXL_32;
	uxlen = MISA_MXL_32;
	ialign = 2'b11;

	rv32x.ialign = ialign;

	if(((mode < MACHINE) || (mode == MACHINE) && mstatus.mie) && !interrput_servicing) {
		interrupt_enabled();
	}
	if(meip && mie.meip) {
		external_interrupt_pending();
	}
	if(mtip && mie.mtip) {
		timer_interrupt_pending();
	}
	if(msip && mie.msip) {
		software_interrupt_pending();
	}

	msip := software_interrupt_req;
	mtip := timer_interrupt_req;
	meip := external_interrupt_req;

	func reset {
		wire resetvector[32];

		mode 						:= MACHINE;
		mstatus.mie 				:= 0;
		mstatus.mprv 				:= 0;
		mstatush.mbe				:= 0;
		mstatus.mpp					:= MACHINE;
		misa.mxl 					:= MISA_MXL_32;
		misa.extensions 			:= MISA_EXTENSIONS;
		mcause 						:= RESET;
		mtvec 						:= INIT_MTVEC;

		ic.reset();
		dc.reset();
		resetvector = {mtvec.base, 2'b00};	/* Shynchronous execption(RESET) */
		rv32x.reset(resetvector);
	}
	/* CSR accesses */
	func rv32x.csr_read {
		if(csr_read_not_mapped) {
			illegal_instruction();
		}
		return csr_read(rv32x.cradrs);
	}
	func csr_read {
		any {
			/* Machine-mode */
			(mode >= MACHINE) && cradrs == MISA:			return misa;
			(mode >= MACHINE) && cradrs == MVENDORID:		return mvendorid;
			(mode >= MACHINE) && cradrs == MARCHID:			return marchid;
			(mode >= MACHINE) && cradrs == MIMPID:			return mimpid;
			(mode >= MACHINE) && cradrs == MHARTID:			return mhartid;
											/* Hardwire SPP, SPIE, UPIE, SIE, UIE, MPRV, MXR, SUM, TVM, TW, TSR, FS, XS, SD to zero */
			(mode >= MACHINE) && cradrs == MSTATUS:			return (mstatus | ustatus);
			(mode >= MACHINE) && cradrs == MSTATUSH:		return mstatush;
			(mode >= MACHINE) && cradrs == MTVEC:			return mtvec;
			(mode >= MACHINE) && cradrs == MSCRATCH:		return mscratch;
			(mode >= MACHINE) && cradrs == MEPC:			return mepc;
			(mode >= MACHINE) && cradrs == MCAUSE:			return mcause;
			(mode >= MACHINE) && cradrs == MTVAL:			return mtval;
			(mode >= MACHINE) && cradrs == MIE:				return mie | uie;
			(mode >= MACHINE) && cradrs == MIP:				return mip | 32'({meip, 2'b00, ueip, mtip, 2'b00, utip, msip, 2'b00, usip});
			(mode >= MACHINE) && cradrs == MEDELEG:			return medeleg;
			(mode >= MACHINE) && cradrs == MIDELEG:			return mideleg;
			/* User-mode */
			(mode >= USER) && cradrs == USTATUS:			return ustatus;
			(mode >= USER) && cradrs == UIE:				return uie;
			(mode >= USER) && cradrs == UTVEC:				return utvec;
			(mode >= USER) && cradrs == USCRATCH:			return uscratch;
			(mode >= USER) && cradrs == UEPC:				return uepc;
			(mode >= USER) && cradrs == UCAUSE:				return ucause;
			(mode >= USER) && cradrs == UTVAL:				return utval;
			(mode >= USER) && cradrs == UIP:				return uip;
			else:											{csr_read_not_mapped(); return 0x00000000;}
		}
	}
	func rv32x.csr_write {
		if(rv32x.csr_write_uimm) {
			csr_write(rv32x.cwadrs, {csr_read(rv32x.cwadrs)[31:5], rv32x.cwdata[4:0]});
		} else {
			csr_write(rv32x.cwadrs, rv32x.cwdata);
		}
		if(csr_write_not_mapped) {
			illegal_instruction();
		}
	}

	func csr_write {
		mstatus_t wire mstatus_w;
		mtvec_t  wire mtvec_w;
		mip_t wire mip_w;
		mie_t wire mie_w;

		any {
			(mode >= MACHINE) && cwadrs == MSTATUS: {
				mstatus_w = cwdata;
				
				//mstatus.sd := mstatus_w.sd;
				//mstatus.tsr := mstatus_w.tsr;
				//mstatus.tw := mstatus_w.tw;
				//mstatus.tvm := mstatus_w.tvm;
				//mstatus.mxr := mstatus_w.mxr;
				//mstatus.sum := mstatus_w.sum;
				mstatus.mprv := mstatus_w.mprv;
				//mstatus.xs := mstatus_w.xs;
				//mstatus.fs := mstatus_w.fs;
				//mstatus.mpp := mstatus_w.mpp;	// Only Machine mode
				//mstatus.spp := mstatus_w.spp;
				//mstatus.mpie := mstatus_w.mpie;
				//mstatus.ube := mstatus_w.ube;
				//mstatus.spie := mstatus_w.spie;
				mstatus.mie := mstatus_w.mie;
				//mstatus.sie := mstatus_w.sie;
				mstatus.uie := mstatus_w.uie;
				mstatus.upie := mstatus_w.upie;
				ustatus.uie := mstatus_w.uie;
				ustatus.upie := mstatus_w.upie;
			}
			(mode >= MACHINE) && cwadrs == MSTATUSH:	mstatush := cwdata & 0x00000000;
			(mode >= MACHINE) && cwadrs == MTVEC: {
				mtvec_w = cwdata;
				
				mtvec.base := mtvec_w.base;
				if(mtvec_w.mode < 2'b10) {
					mtvec.mode := mtvec_w.mode;
				}
			}
			(mode >= MACHINE) && cwadrs == MTVAL:		mtval := cwdata;
			(mode >= MACHINE) && cwadrs == MSCRATCH:	mscratch := cwdata;
			(mode >= MACHINE) && cwadrs == MEPC:		mepc := {cwdata[31:2], (cwdata[1:0] & ~ialign)};
			(mode >= MACHINE) && cwadrs == MCAUSE:		mcause := mcause;
			(mode >= MACHINE) && cwadrs == MIE: {
				mie_w = cwdata;

				mie.meip := mie_w.meip;
				mie.mtip := mie_w.mtip;
				mie.msip := mie_w.msip;
				uie.ueip := mie_w.ueip;
				uie.utip := mie_w.utip;
				uie.usip := mie_w.usip;
			}
			(mode >= MACHINE) && cwadrs == MIP: {
				mip_w = cwdata;
				
				/* mip.meip, mip.mtip, mip.msip is read-only */
				/* Only interrupt controller can set or reset */
				mip := mip;
			}
			(mode >= MACHINE) && cwadrs == MEDELEG: {
				medeleg := cwdata;
			}
			(mode >= MACHINE) && cwadrs == MIDELEG: {
				mideleg := cwdata;
			}
			(mode >= USER) && cwadrs == USTATUS: {
				mstatus_w = cwdata;

				ustatus.uie := mstatus_w.uie;
				ustatus.upie := mstatus_w.upie;
			}
			(mode >= USER) && cwadrs == UIE: {
				mie_w = cwdata;

				uie.ueip := mie_w.ueip;
				uie.utip := mie_w.utip;
				uie.usip := mie_w.usip;
			}
			(mode >= USER) && cwadrs == UTVEC: {
				mtvec_w = cwdata;
				
				utvec.base := mtvec_w.base;
				if(mtvec_w.mode < 2'b10) {
					utvec.mode := mtvec_w.mode;
				}
			}
			(mode >= USER) && cwadrs == USCRATCH:		uscratch := cwdata;
			(mode >= USER) && cwadrs == UEPC:			uepc := cwdata;
			(mode >= USER) && cwadrs == UCAUSE:			ucause := cwdata;
			(mode >= USER) && cwadrs == UTVAL:			utval := cwdata;
			(mode >= USER) && cwadrs == UIP:			uip := cwdata;
			else: csr_write_not_mapped();
		}
#ifdef DEBUG
		debug_csr_write(rv32x.cwadrs, rv32x.cwdata);
#endif
	}
	func rv32x.ecall {
		environment_call();
	}
	func rv32x.ebreak {
		environment_break();
	}
	func rv32x.illegal_instruction {
		illegal_instruction();
	}
	func rv32x.instruction_address_misaligned {
		instruction_address_misaligned();
	}
	alt {
		/* Interrupt has higher priorities than exceptions */
		interrupt_enabled && external_interrupt_pending:	external_interrupt();
		interrupt_enabled && software_interrupt_pending:	software_interrupt();
		interrupt_enabled && timer_interrupt_pending:		timer_interrupt();
		/* Process exception in preceeding instruction in pipeline */	
		/* Memory stage */
		/* memory address is sent out to bus in memory stage process load_store_amo_address_breakpoint at memory stage */
		load_store_amo_address_breakpoint:						load_store_amo_address_breakpoint_exception();
		store_amo_address_misaligned:							store_amo_address_misaligned_exception();
		load_address_misaligned:								load_address_misaligned_exception();
		store_amo_page_fault:									store_amo_page_fault_exception();
		load_page_fault:										load_page_fault_exception();
		store_amo_access_fault:									store_amo_access_fault_exception();
		load_access_fault:										load_access_fault_exception();
		/* Execute stage */
		instruction_address_misaligned:							instruction_address_misaligned_exception();	
		illegal_instruction:									illegal_instruction_exception();
		environment_call:										environment_call_exception();	
		environment_break: 										environment_break_exception();	
		/* Ifetch stage */
		instruction_address_breakpoint:							instruction_address_breakpoint_exception();
		instruction_page_fault:									instruction_page_fault_exception();
		instruction_access_fault:								instruction_access_fault_exception();
	}
	func interrupt {
		interrput_servicing := 1;
	}
	func external_interrupt {
		interrupt();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		rv32x.get_pc_memory();
		mtrap(MACHINE_EXTERNAL_INTERRUPT, rv32x.epc);
	}
	func software_interrupt {
		interrupt();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		rv32x.get_pc_memory();
		mtrap(MACHINE_SOFTWARE_INTERRUPT, rv32x.epc);
	}
	func timer_interrupt {
		interrupt();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		rv32x.get_pc_memory();
		mtrap(MACHINE_TIMER_INTERRUPT, rv32x.epc);
	}
	func load_store_amo_address_breakpoint_exception {
		exception();
	}
	func store_amo_address_misaligned_exception {
		exception();
		mtval := rv32x.daddr;
		rv32x.get_inst_memory();
		rv32x.get_pc_memory();
		mtrap(STORE_AMO_ADDRESS_MISALIGNED, rv32x.epc);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
#ifdef DEBUG
		debug_einst := rv32x.einst;
#endif
	}
	func load_address_misaligned_exception {
		exception();
		mtval := rv32x.daddr;
		rv32x.get_inst_memory();
		rv32x.get_pc_memory();
		mtrap(LOAD_ADDRESS_MISALIGNED, rv32x.epc);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
#ifdef DEBUG
		debug_einst := rv32x.einst;
#endif
	}
	func store_amo_page_fault_exception {
		exception();
	}
	func load_page_fault_exception {
		exception();
	}
	func store_amo_access_fault_exception {
		exception();
	}
	func load_access_fault_exception {
		exception();
	}
	func illegal_instruction_exception {
		exception();
		mtval := rv32x.einst;
		rv32x.get_pc_execute();
		rv32x.get_inst_execute();
		mtrap(ILLEGAL_INSTRUCTION, rv32x.epc);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
#ifdef DEBUG
		debug_einst := rv32x.einst;
#endif
	}
	func environment_call_exception {
		exception();
		mtval := 0;
		rv32x.get_pc_execute();
		rv32x.get_inst_execute();
		mtrap(ENVIRONMENT_CALL_FROM_M_MODE, rv32x.epc);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
#ifdef DEBUG
		debug_einst := rv32x.einst;
#endif
	}
	func environment_break_exception {
		exception();
		mtval := rv32x.epc;
		rv32x.get_pc_execute();
		rv32x.get_inst_execute();
		mtrap(BREAKPOINT, rv32x.epc);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
#ifdef DEBUG
		debug_einst := rv32x.einst;
#endif
	}
	func instruction_address_misaligned_exception {
		exception();
		mtval := rv32x.misaligned_target_address;
		rv32x.get_pc_execute();	
		mtrap(INSTRUCTION_ADDRESS_MISALIGNED, rv32x.epc);
		rv32x.stall_ifetch_req();
		rv32x.flush_ifetch();
		rv32x.stall_decode_req();
		rv32x.flush_decode();
		rv32x.stall_execute_req();
		rv32x.flush_execute();
#ifdef DEBUG
		rv32x.get_inst_execute();
		debug_einst := rv32x.einst;
#endif
	}
	func instruction_address_breakpoint_exception {
		exception();
	}
	func instruction_page_fault_exception {
		exception();
	}
	func instruction_access_fault_exception {
		exception();
	}
	func rv32x.mret {
		mtval := 0;
		mtrap_ret();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		interrput_servicing := 0;
	}
	proc mtrap_ret {
		mstatus.mie 	:= mstatus.mpie;
		mstatus.mpie	:= 1;
		mstatus.mpp		:= MACHINE;
		mstatus.mprv 	:= 0;
		mode 			:= mstatus.mpp;
		rv32x.stall_ifetch_req();
		rv32x.trap({mepc[31:2], mepc[1:0] & ~ialign});
		finish();
	}
	proc mtrap {
		wire v[32];

		mode := MACHINE;
		mstatus.mpie 	:= mstatus.mie;
		mstatus.mie 	:= 0;
		mstatus.mpp 	:= mode;
		mcause 			:= cause;
		mepc 			:= epc;


		any {
			mtvec.mode == 2'b00: 				v = {mtvec.base, 2'b00};
			mtvec.mode == 2'b01 && !cause[31]:	v = {mtvec.base, 2'b00};
			mtvec.mode == 2'b01 && cause[31]:	v = {mtvec.base, 2'b00}
														+32'({cause[9:0], 2'b00});
		}
		rv32x.stall_ifetch_req();
		rv32x.trap(v);
#ifdef DEBUG
		debug_raise_exception(cause, epc, mtval, debug_einst);
#endif
		finish();
	}
	/* fence.i */
	func rv32x.fencei {
		if(!ic_invalidate_done) {
			ic.invalidate();
		}
		if(!dc_flush_done) {
			dc.flush();
		}
		if(dc_flush_done && ic_invalidate_done) {
			ic_invalidate_done := 0;
			dc_flush_done := 0;
			rv32x.dmem_valid();
		}
	}
	func ic.invalidate_done {
		ic_invalidate_done := 1;
	}
	func dc.flush_done {
		dc_flush_done := 1;
	}
	func ic.mem_read {
		reg ic_read_cnt[3] = 0;
		mem ic_read_data[4][32];
		
		imem_read({ic.mem_adrs[31:4], 4'({ic_read_cnt, 2'b00})}, MEM_WORD);
		if(ic_read_cnt == 4) {
			if(imem_valid) {
				ic_read_cnt := 0;
				ic.mem_rdata = {ic_read_data[3], ic_read_data[2], ic_read_data[1], ic_read_data[0]};
				ic.mem_valid();
			}
		} else {
			if(imem_valid) {
				ic_read_cnt++;
				ic_read_data[ic_read_cnt] := inst;
			}
		}
	}
	func rv32x.imem_read {
		ic.read(rv32x.iaddr);
	}
	func ic.valid {
		rv32x.inst = ic.rdata;
		rv32x.imem_valid();
	}
	any {
		(rv32x.daddr[1:0] != 2'b00) && (rv32x.dbyteen == MEM_WORD):	misaligned();
		(rv32x.daddr[0] != 1'b0) && (rv32x.dbyteen == MEM_HALFWORD): misaligned();
	}
	func rv32x.dmem_read {

		check_daddr_range(rv32x.daddr);
		if(!interrupt) {
			any {
				cacheable && !not_mapped && !misaligned:	dc.read(rv32x.daddr, rv32x.dbyteen);
				!cacheable && !not_mapped && !misaligned:	noncacheable_read(rv32x.daddr, rv32x.dbyteen);	
				not_mapped:									load_access_fault(); 
				misaligned:									load_address_misaligned();
			}
		}
	}
	func noncacheable_read {
		dmem_read(ncadrs, ncbyteen);
		if(dmem_valid) {
			rv32x.rdata = rdata;
			rv32x.dmem_valid();
		}
	}
	func dc.mem_read {
		reg dc_read_cnt[3] = 0;
		mem dc_read_data[4][32];

		dmem_read({dc.mem_adrs[31:4], 4'({dc_read_cnt, 2'b00})}, MEM_WORD);
		if(dc_read_cnt == 4) {
			if(dmem_valid) {
				dc_read_cnt := 0;
				dc.mem_rdata = {dc_read_data[3], dc_read_data[2], dc_read_data[1], dc_read_data[0]};
				dc.mem_valid();
			}
		} else {
			if(dmem_valid) {
				dc_read_cnt++;
				dc_read_data[dc_read_cnt] := rdata;
			}
		}
	}
	func rv32x.dmem_write {
		check_daddr_range(rv32x.daddr);
		if(!interrupt) {
			any {
				cacheable && !not_mapped && !misaligned:	dc.write(rv32x.daddr, rv32x.dbyteen, rv32x.wdata);
				!cacheable && !not_mapped && !misaligned:	noncacheable_write(rv32x.daddr, rv32x.dbyteen, rv32x.wdata);
				not_mapped:									store_amo_access_fault();
				misaligned:									store_amo_address_misaligned();
			}
#ifdef DEBUG
			if(rv32x.daddr == 0x80001000) {
				sim_done(rv32x.wdata);
			}
#endif
		}
	}
	func noncacheable_write {
		dmem_write(ncadrs, ncbyteen, ncdata);
		if(dmem_valid) {
			rv32x.dmem_valid();
		}
	}
	func dc.mem_write {
		reg dc_write_cnt[3] = 0;
		mem dc_write_data[4][32];
		
		dmem_write({dc.mem_adrs[31:4], 4'({dc_write_cnt, 2'b00})}, MEM_WORD, dc_write_data[dc_write_cnt]);
		any {
			dc_write_cnt == 0: {
				dc_write_data[0] := dc.mem_wdata[31:0];
				dc_write_data[1] := dc.mem_wdata[63:32];
				dc_write_data[2] := dc.mem_wdata[95:64];
				dc_write_data[3] := dc.mem_wdata[127:96];
				dc_write_cnt++;
			}
			dc_write_cnt == 4: {
				if(dmem_valid) {
					dc_write_cnt := 0;
					dc.mem_valid();
				}
			}
			else: {
				if(dmem_valid) {
					dc_write_cnt++;
				}
			}
		}
	}
	func dc.valid {
		rv32x.rdata = dc.rdata;
		rv32x.dmem_valid();
	}
#ifdef DEBUG
	debug_x0  = rv32x.debug_x0;
	debug_x1  = rv32x.debug_x1;
	debug_x2  = rv32x.debug_x2;
	debug_x3  = rv32x.debug_x3;
	debug_x4  = rv32x.debug_x4;
	debug_x5  = rv32x.debug_x5;
	debug_x6  = rv32x.debug_x6;
	debug_x7  = rv32x.debug_x7;
	debug_x8  = rv32x.debug_x8;
	debug_x9  = rv32x.debug_x9;
	debug_x10 = rv32x.debug_x10;
	debug_x11 = rv32x.debug_x11;
	debug_x12 = rv32x.debug_x12;
	debug_x13 = rv32x.debug_x13;
	debug_x14 = rv32x.debug_x14;
	debug_x15 = rv32x.debug_x15;
	debug_x16 = rv32x.debug_x16;
	debug_x17 = rv32x.debug_x17;
	debug_x18 = rv32x.debug_x18;
	debug_x19 = rv32x.debug_x19;
	debug_x20 = rv32x.debug_x20;
	debug_x21 = rv32x.debug_x21;
	debug_x22 = rv32x.debug_x22;
	debug_x23 = rv32x.debug_x23;
	debug_x24 = rv32x.debug_x24;
	debug_x25 = rv32x.debug_x25;
	debug_x26 = rv32x.debug_x26;
	debug_x27 = rv32x.debug_x27;
	debug_x28 = rv32x.debug_x28;
	debug_x29 = rv32x.debug_x29;
	debug_x30 = rv32x.debug_x30;
	debug_x31 = rv32x.debug_x31;
	debug_pc = rv32x.debug_pc;
	func rv32x.debug_retire {
		debug_retire(rv32x.debug_retire_pc, rv32x.debug_retire_inst);
	}
	func rv32x.debug_wb {
		debug_wb(rv32x.debug_wb_rd, rv32x.debug_wb_data);
	}
	func rv32x.debug_mem_write {
		debug_mem_write(rv32x.debug_mem_adrs, rv32x.debug_mem_byteen, rv32x.debug_mem_data);
	}
#endif
}
