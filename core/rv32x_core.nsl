#include "rv32x_core.h"
#include "rv32x5p.h"
#include "opcode.h"
#include "priv.h"
#include "csr.h"
#include "csr_map.h"
#include "ifetch_unit.h"
#include "load_store_unit.h"

#define INIT_MTVEC {30'b00000_00000_00000_00000_00000_00000, MTVEC_MODE_DIRECT}
#define MISA_EXTENSIONS MISA_EXTENSIONS_I|MISA_EXTENSIONS_M|MISA_EXTENSIONS_A|MISA_EXTENSIONS_U|MISA_EXTENSIONS_S

module rv32x_core {
	rv32x5p rv32x;							/* 5-stage pipelined processor(single issue, in-order) */
	ifetch_unit ic;
	load_store_unit lsu;
	reg ic_invalidate_done = 0;
	reg ic_tlb_flush_done = 0;
	reg lsu_cache_flush_done = 0;
	reg lsu_tlb_flush_done = 0;
	wire in_memory_operation;
	reg priv_mode[2];						/* Current priv mode */
	reg valid_context;
	func_self abandon_context();
	
	/* Trap */
	reg trap_cause[32];
	reg trap_pc[32];
	reg trap_val[32];
	reg trap_priv_mode[2];
	proc_name trap(trap_priv_mode, trap_cause, trap_pc, trap_val);
	proc_name trap_mret();
	proc_name trap_sret();
	proc_name trap_uret();
	/* Interrupts */
	func_self interrupt();
	func_self machine_interrupt_enabled();
	func_self supervisor_interrupt_enabled();
	/* Pending interrupts */
	func_self machine_timer_interrupt_pending();
	func_self machine_software_interrupt_pending();
	func_self machine_external_interrupt_pending();
	func_self supervisor_timer_interrupt_pending();
	func_self supervisor_software_interrupt_pending();
	func_self supervisor_external_interrupt_pending();
	/* Exceptions */
	func_self exception();
	func_self instruction_address_breakpoint_exception();
	func_self instruction_page_fault_exception();
	func_self instruction_access_fault_exception();
	func_self illegal_instruction_execute_stage_exception();
	func_self illegal_instruction_memory_stage_exception();
	func_self instruction_address_misaligned_exception();
	func_self environment_call_exception();
	func_self environment_break_exception();
	func_self load_store_amo_address_breakpoint_exception();
	func_self store_amo_address_misaligned_exception();
	func_self load_address_misaligned_exception();
	func_self store_amo_page_fault_exception();
	func_self load_page_fault_exception();
	func_self store_amo_access_fault_exception();
	func_self load_access_fault_exception();
	/* Pending exceptions */
	func_self instruction_address_breakpoint();
	func_self instruction_page_fault();
	func_self instruction_access_fault();
	func_self illegal_instruction_execute_stage();
	func_self illegal_instruction_memory_stage();
	func_self instruction_address_misaligned();
	func_self environment_call();
	func_self environment_break();
	func_self load_store_amo_address_breakpoint();
	func_self store_amo_address_misaligned();
	func_self load_address_misaligned();
	func_self store_amo_page_fault();
	func_self load_page_fault();
	func_self store_amo_access_fault();
	func_self load_access_fault();
	func_self machine_timer_interrupt();
	func_self machine_external_interrupt();
	func_self machine_software_interrupt();
	func_self supervisor_timer_interrupt();
	func_self supervisor_external_interrupt();
	func_self supervisor_software_interrupt();
	/* CSR operations */
	wire cwadrs[32];
	wire cwdata[32];
	wire cradrs[32];
	wire crdata[32];
	func_self csr_read(cradrs) : crdata;
	func_self csr_write(cwadrs, cwdata);
	func_self csr_read_not_mapped();
	func_self csr_write_not_mapped();
#ifdef DEBUG
	reg debug_einst[32];
#endif

	/* CSRs */
	/* Machine mode CSRs */
	mvendorid_t reg mvendorid		= 0;
	marchid_t reg marchid			= 0;
	mimpid_t reg mimpid				= 0;
	mhartid_t reg mhartid			= 0;
	mstatus_t reg mstatus			= 0;
	mstatush_t reg mstatush			= 0;
	mtvec_t reg mtvec 				= INIT_MTVEC;
	mscratch_t reg mscratch			= 0;
	mepc_t reg mepc					= 0;
	mcause_t reg mcause 			= RESET;
	mtval_t reg mtval				= 0;
	misa_t reg misa					= 0;
	mie_t reg mie					= 0;
	mip_t reg mip					= 0;
	mideleg_t reg mideleg			= 0;
	medeleg_t reg medeleg			= 0;
	/* Supervisor mode CSRs */
	sstatus_t reg sstatus			= 0;		
	sie_t reg sie					= 0;
	stvec_t reg stvec				= 0;
	sscratch_t reg sscratch			= 0;
	sepc_t reg sepc					= 0;
	scause_t reg scause				= 0;
	stval_t reg stval 				= 0;
	sip_t reg sip					= 0;
	satp_t reg satp					= 0;
	/* Hardware Performance Monitor */
	reg minstret[64]				= 0;
	reg mcycle[64]					= 0;
	reg utime[64]					= 0;
	/* Interrupts sources */
	wire msip;
	wire mtip;
	wire meip;
	wire ssip;
	wire stip;
	wire seip;

	wire sxlen[2];
	wire uxlen[2];
	wire ialign[2];
	
	sxlen = MISA_MXL_32;
	uxlen = MISA_MXL_32;
	ialign = 2'b11;

	if(!csr_write) {	/* precisely, !((mcycle || minstret) && csr_write) */
		mcycle++;	/* if wfi, then stop counting up */
		if(rv32x.instret) {
			minstret++;	/* not-precise, some instruction such as ecall will not retire */
		}
	}
	utime++;	/* if m_clock == 50MHz, then 1 tick is 20ns */

	/* checking !trap is required, since most of interrupt pending bits
		only be cleared from software via writing one of correspoinding
		register in PLIC, CLINT not xip registers(some may be read-only).
		Hence, until disabling xstatus.mie, interrupts pendings are handled
		many times. So check if currently handling interrupts(in trap state)
		or not.
	*/
	in_memory_operation = rv32x.fencei || rv32x.sfence_vma || rv32x.dmem_read || rv32x.dmem_write || rv32x.load_reserved || rv32x.store_conditional || rv32x.amo_exe;
	if(((priv_mode < MACHINE) || ((priv_mode == MACHINE) && mstatus.mie)) && !trap && !in_memory_operation && valid_context) {
		machine_interrupt_enabled();
	}
	if(((priv_mode < SUPERVISOR) || ((priv_mode == SUPERVISOR) && mstatus.sie)) && !trap && !in_memory_operation && valid_context) {
		supervisor_interrupt_enabled();
	}
	if(meip && mie.meie) {
		machine_external_interrupt_pending();
	}
	if(mtip && mie.mtie) {
		machine_timer_interrupt_pending();
	}
	if(msip && mie.msie) {
		machine_software_interrupt_pending();
	}
	if(seip && sie.seie) {
		supervisor_external_interrupt_pending();
	}
	if(stip && sie.stie) {
		supervisor_timer_interrupt_pending();
	}
	if(ssip && sie.ssie) {
		supervisor_software_interrupt_pending();
	}

	msip = (machine_software_interrupt_req);
	mtip = (machine_timer_interrupt_req);
	meip = (machine_external_interrupt_req);
	ssip = ((supervisor_software_interrupt_req | mip.ssip));
	stip = ((supervisor_timer_interrupt_req | mip.stip));
	seip = ((supervisor_external_interrupt_req | mip.seip));

	lsu.satp_mode	= satp.mode;
	lsu.satp_asid	= satp.asid;
	lsu.satp_ppn	= satp.ppn;
	lsu.mstatus_mxr	= mstatus.mxr;
	lsu.sstatus_sum	= sstatus.sum;
	lsu.priv_mode	= if(mstatus.mprv) mstatus.mpp else priv_mode;

	ic.priv_mode	= priv_mode;
	ic.satp_mode = satp.mode;
	ic.satp_ppn = satp.ppn;

	rv32x.ialign = ialign;

	func reset {
		wire resetvector[32];

		priv_mode 					:= MACHINE;
		mstatus.mie 				:= 0;
		mstatus.mprv 				:= 0;
		mstatush.mbe				:= 0;
		mstatus.mpp					:= MACHINE;
		misa.mxl 					:= MISA_MXL_32;
		misa.extensions 			:= MISA_EXTENSIONS;
		mcause 						:= RESET;
		mtvec 						:= INIT_MTVEC;

		ic.reset();
		lsu.reset();
		resetvector = {mtvec.base, 2'b00};	/* Shynchronous execption(RESET) */
		rv32x.reset(resetvector);
	}
	/* CSR accesses */
	func rv32x.csr_read {
		if(csr_read_not_mapped) {
			illegal_instruction_memory_stage();
		}
		return csr_read(rv32x.cradrs);
	}
	func csr_read {
		any {
			/* Machine-mode */
			(priv_mode >= MACHINE) && cradrs == MVENDORID:			return mvendorid;
			(priv_mode >= MACHINE) && cradrs == MARCHID:			return marchid;
			(priv_mode >= MACHINE) && cradrs == MIMPID:				return mimpid;
			(priv_mode >= MACHINE) && cradrs == MHARTID:			return mhartid;
			(priv_mode >= MACHINE) && cradrs == MSTATUS:			return mstatus;
			(priv_mode >= MACHINE) && cradrs == MISA:				return misa;
			(priv_mode >= MACHINE) && cradrs == MEDELEG:			return medeleg;
			(priv_mode >= MACHINE) && cradrs == MIDELEG:			return mideleg;
			(priv_mode >= MACHINE) && cradrs == MIE:				return mie;
			(priv_mode >= MACHINE) && cradrs == MTVEC:				return mtvec;
			//(priv_mode >= MACHINE) && cradrs == MCOUNTEREN:		return mcounteren;
			(priv_mode >= MACHINE) && cradrs == MSTATUSH:			return mstatush;
			(priv_mode >= MACHINE) && cradrs == MSCRATCH:			return mscratch;
			(priv_mode >= MACHINE) && cradrs == MEPC:				return mepc;
			(priv_mode >= MACHINE) && cradrs == MCAUSE:				return mcause;
			(priv_mode >= MACHINE) && cradrs == MTVAL:				return mtval;
			(priv_mode >= MACHINE) && cradrs == MIP:				return mip | 32'({meip, 1'b1, seip, 1'b0, mtip, 1'b0, stip, 1'b0, msip, 1'b0, ssip, 1'b0});
			//(priv_mode >= MACHINE) && cradrs == MTINST:			return mtinst;
			//(priv_mode >= MACHINE) && cradrs == MTVAL2:			return mtval2;
			/* Machine Memory Protection */
			/* Machine Counter/Timers */
			(priv_mode >= MACHINE) && cradrs == MCYCLEH:			return mcycle[63:32];
			(priv_mode >= MACHINE) && cradrs == MCYCLE:				return mcycle[31:0];
			(priv_mode >= MACHINE) && cradrs == MINSTRETH:			return minstret[63:32];
			(priv_mode >= MACHINE) && cradrs == MINSTRET:			return minstret[31:0];

			/* Supervisor-mode */
			(priv_mode >= SUPERVISOR) && cradrs == SSTATUS:			return sstatus;
			//(priv_mode >= SUPERVISOR) && cradrs == SEDELEG:		return sedeleg;
			//(priv_mode >= SUPERVISOR) && cradrs == SIDELEG:		return sideleg;
			(priv_mode >= SUPERVISOR) && cradrs == SIE:				return sie;
			(priv_mode >= SUPERVISOR) && cradrs == STVEC:			return stvec;
			//(priv_mode >= SUPERVISOR) && cradrs == SCOUNTEREN:	return scounteren;
			(priv_mode >= SUPERVISOR) && cradrs == SSCRATCH:		return sscratch;
			(priv_mode >= SUPERVISOR) && cradrs == SEPC:			return sepc;
			(priv_mode >= SUPERVISOR) && cradrs == SCAUSE:			return scause;
			(priv_mode >= SUPERVISOR) && cradrs == STVAL:			return stval;
			(priv_mode >= SUPERVISOR) && cradrs == SIP:				return sip;
			(priv_mode >= SUPERVISOR) && cradrs == SATP
				&& !((priv_mode == SUPERVISOR) && mstatus.tvm):		return satp;

			/* User-mode */
			//(priv_mode >= USER) && cradrs == FRM:					return frm;
			//(priv_mode >= USER) && cradrs == FCSR:				return fcsr;
			/* User Counter/Timers */
			(priv_mode >= USER) && cradrs == CYCLEH:				return mcycle[63:32];
			(priv_mode >= USER) && cradrs == CYCLE:					return mcycle[31:0];
			(priv_mode >= USER) && cradrs == INSTRETH:				return minstret[63:32];
			(priv_mode >= USER) && cradrs == INSTRET:				return minstret[31:0];
			(priv_mode >= USER) && cradrs == TIMEH:					return utime[63:32];
			(priv_mode >= USER) && cradrs == TIME:					return utime[31:0];
			else:							{csr_read_not_mapped(); return 0x00000000;}
		}
	}
	func rv32x.csr_write {
		if(rv32x.csr_write_uimm) {
			csr_write(rv32x.cwadrs, {csr_read(rv32x.cwadrs)[31:5], rv32x.cwdata[4:0]});
		} else {
			csr_write(rv32x.cwadrs, rv32x.cwdata);
		}
		if(csr_write_not_mapped) {
			illegal_instruction_memory_stage();
		}
	}
	func csr_write {
		mstatus_t wire status_w; 
		mtvec_t  wire tvec_w;
		mip_t wire ip_w;
		mideleg_t wire ideleg_w;
		medeleg_t wire edeleg_w;
		mie_t wire ie_w;
		satp_t wire satp_w;

		any {
			(priv_mode >= MACHINE) && cwadrs == MSTATUS: {
				status_w = cwdata;
				
				//mstatus.sd	:= status_w.sd;
				mstatus.tsr		:= status_w.tsr;
				mstatus.tw		:= status_w.tw;
				mstatus.tvm		:= status_w.tvm;
				mstatus.mxr		:= status_w.mxr;
				sstatus.mxr		:= status_w.mxr;
				mstatus.sum		:= status_w.sum;
				sstatus.sum		:= status_w.sum;
				mstatus.mprv 	:= status_w.mprv;
				//mstatus.xs	:= status_w.xs;
				//mstatus.fs	:= status_w.fs;
				mstatus.mpp		:= if(status_w.mpp != HYPERVISOR) status_w.mpp else mstatus.mpp;
				mstatus.spp		:= status_w.spp;
				sstatus.spp		:= status_w.spp;
				mstatus.mpie 	:= status_w.mpie;
				//mstatus.ube 	:= status_w.ube;
				mstatus.spie	:= status_w.spie;
				sstatus.spie	:= status_w.spie;
				mstatus.mie		:= status_w.mie;
				mstatus.sie		:= status_w.sie;
				sstatus.sie		:= status_w.sie;
			}
			(priv_mode >= MACHINE) && cwadrs == MEDELEG: {
				edeleg_w = cwdata;

				medeleg.environment_call_from_u_mode := edeleg_w.environment_call_from_u_mode;
				medeleg.environment_call_from_s_mode := edeleg_w.environment_call_from_s_mode;
				medeleg.load_access_fault := edeleg_w.load_access_fault;
				medeleg.load_page_fault := edeleg_w.load_page_fault;
				medeleg.store_amo_access_fault := edeleg_w.store_amo_access_fault;
				medeleg.store_amo_page_fault := edeleg_w.store_amo_page_fault;
				medeleg.breakpoint := edeleg_w.breakpoint;
				medeleg.instruction_address_misaligned := edeleg_w.instruction_address_misaligned;
				medeleg.instruction_access_fault := edeleg_w.instruction_access_fault;
				medeleg.instruction_page_fault := edeleg_w.instruction_page_fault;
			}
			(priv_mode >= MACHINE) && cwadrs == MIDELEG: {
				ideleg_w = cwdata;

				mideleg.seip := ideleg_w.seip;
				mideleg.stip := ideleg_w.stip;
				mideleg.ssip := ideleg_w.ssip;
			}
			(priv_mode >= MACHINE) && cwadrs == MIE: {
				ie_w = cwdata;

				/* Machine mode */
				mie.meie := ie_w.meie;
				mie.mtie := ie_w.mtie;
				mie.msie := ie_w.msie;

				/* Supervisor mode */
				mie.seie := ie_w.seie;
				mie.stie := ie_w.stie;
				mie.ssie := ie_w.ssie;
				sie.seie := ie_w.seie;
				sie.stie := ie_w.stie;
				sie.ssie := ie_w.ssie;
			}
			(priv_mode >= MACHINE) && cwadrs == MTVEC: {
				tvec_w = cwdata;
				
				mtvec.base := tvec_w.base;
				if(tvec_w.mode < 2'b10) {
					mtvec.mode := tvec_w.mode;
				}
			}
			(priv_mode >= MACHINE) && cwadrs == MSTATUSH: {
				mstatush := cwdata & 0x00000000;
			}
			(priv_mode >= MACHINE) && cwadrs == MSCRATCH: {
				mscratch := cwdata;
			}
			(priv_mode >= MACHINE) && cwadrs == MEPC: {
				mepc := {cwdata[31:2], (cwdata[1:0] & ~ialign)};
			}
			(priv_mode >= MACHINE) && cwadrs == MCAUSE:	{
				mcause := mcause;
			}
			(priv_mode >= MACHINE) && cwadrs == MTVAL: {
				mtval := cwdata;
			}
			(priv_mode >= MACHINE) && cwadrs == MIP: {
				ip_w = cwdata;
				
				/* mip.meip, mip.mtip, mip.msip is read-only */
				/* Only interrupt controller can set or reset */
				/* Supervisor mode */
				mip.ssip := ip_w.ssip;
				mip.seip := ip_w.seip;
				mip.stip := ip_w.stip;
				sip.ssip := ip_w.ssip;
				sip.seip := ip_w.seip;
				sip.stip := ip_w.stip;
			}
			(priv_mode >= MACHINE) && cwadrs == MCYCLE:	{
				mcycle	:= {mcycle[63:32], cwdata};
			}
			(priv_mode >= MACHINE) && cwadrs == MINSTRET: {
				minstret := {minstret[63:32], cwdata};
			}
			(priv_mode >= MACHINE) && cwadrs == MCYCLEH: {
				mcycle	:= {cwdata, mcycle[31:0]};
			}
			(priv_mode >= MACHINE) && cwadrs == MINSTRETH: {
				minstret := {cwdata, minstret[31:0]};
			}
			(priv_mode >= SUPERVISOR) && cwadrs == SSTATUS: {
				status_w = cwdata;

				mstatus.sum		:= status_w.sum;
				sstatus.sum		:= status_w.sum;

				mstatus.mxr		:= status_w.mxr;
				sstatus.mxr		:= status_w.mxr;

				mstatus.sie		:= status_w.sie;
				mstatus.spie	:= status_w.spie;
				mstatus.spp		:= status_w.spp;

				sstatus.sie		:= status_w.sie;
				sstatus.spie	:= status_w.spie;
				sstatus.spp		:= status_w.spp;
			}
			(priv_mode >= SUPERVISOR) && cwadrs == STVEC: {
				tvec_w = cwdata;
				
				stvec.base := tvec_w.base;
				if(tvec_w.mode < 2'b10) {
					stvec.mode := tvec_w.mode;
				}
			}
			(priv_mode >= SUPERVISOR) && cwadrs == SIE: {
				ie_w = cwdata;
				
				mie.seie := ie_w.seie;
				mie.stie := ie_w.stie;
				mie.ssie := ie_w.ssie;
				sie.seie := ie_w.seie;
				sie.stie := ie_w.stie;
				sie.ssie := ie_w.ssie;
			}
			(priv_mode >= SUPERVISOR) && cwadrs == SIP: {
				ip_w = cwdata;

				mip.ssip := ip_w.ssip;
				sip.ssip := ip_w.ssip;
			}
			(priv_mode >= SUPERVISOR) && cwadrs == SATP
				&& !((priv_mode == SUPERVISOR) && (mstatus.tvm)): {
					satp_w = cwdata;

					satp.mode := satp_w.mode;
					satp.asid := satp_w.asid;
					satp.ppn := satp_w.ppn;
				}
			(priv_mode >= SUPERVISOR) && cwadrs == SSCRATCH: {
				sscratch := cwdata;
			}
			(priv_mode >= SUPERVISOR) && cwadrs == SEPC: {
				sepc := {cwdata[31:2], (cwdata[1:0] & ~ialign)};
			}
			(priv_mode >= SUPERVISOR) && cwadrs == SCAUSE: {
				scause := scause;
			}
			(priv_mode >= SUPERVISOR) && cwadrs == STVAL: {
				stval := cwdata;
			}
			else: csr_write_not_mapped();
		}
#ifdef DEBUG
		rv32x.get_csr(cwadrs, cwdata);
#endif
	}
	func rv32x.ecall {
		environment_call();
	}
	func rv32x.wfi {
		any {
			/* no bounded time limit, so always generates illegal instruction exception on less priv */
			(mstatus.tw && priv_mode == USER):			illegal_instruction_execute_stage();
			(mstatus.tw && priv_mode == SUPERVISOR):	illegal_instruction_execute_stage();
		}
	}
	func rv32x.ebreak {
		environment_break();
	}
	func rv32x.illegal_instruction_execute_stage {
		illegal_instruction_execute_stage();
	}
	func rv32x.instruction_address_misaligned {
		instruction_address_misaligned();
	}
	func rv32x.store_address_misaligned {
		store_amo_address_misaligned();
	}
	func rv32x.load_address_misaligned {
		load_address_misaligned();
	}
	/* Trap priority encoder */
	alt {
		/* Interrupt has higher priorities than exceptions */
		machine_interrupt_enabled && machine_external_interrupt_pending:		machine_external_interrupt();
		machine_interrupt_enabled && machine_software_interrupt_pending:		machine_software_interrupt();
		machine_interrupt_enabled && machine_timer_interrupt_pending:			machine_timer_interrupt();
		machine_interrupt_enabled
					&& supervisor_external_interrupt_pending && ~mideleg.seip:	supervisor_external_interrupt();
		machine_interrupt_enabled
					&& supervisor_software_interrupt_pending && ~mideleg.ssip:	supervisor_software_interrupt();
		machine_interrupt_enabled
					&& supervisor_timer_interrupt_pending && ~mideleg.stip:		supervisor_timer_interrupt();
		supervisor_interrupt_enabled
					&& supervisor_external_interrupt_pending && mideleg.seip:	supervisor_external_interrupt();
		supervisor_interrupt_enabled
					&& supervisor_software_interrupt_pending && mideleg.ssip:	supervisor_software_interrupt();
		supervisor_interrupt_enabled
					&& supervisor_timer_interrupt_pending && mideleg.stip:		supervisor_timer_interrupt();
		/* Process exception in preceeding instruction in pipeline */	
		/* Memory stage */
		/* memory address is sent out to bus in memory stage process load_store_amo_address_breakpoint at memory stage */
		illegal_instruction_memory_stage:										illegal_instruction_memory_stage_exception();
		load_store_amo_address_breakpoint:										load_store_amo_address_breakpoint_exception();
		store_amo_address_misaligned:											store_amo_address_misaligned_exception();
		load_address_misaligned:												load_address_misaligned_exception();
		store_amo_page_fault:													store_amo_page_fault_exception();
		load_page_fault:														load_page_fault_exception();
		store_amo_access_fault:													store_amo_access_fault_exception();
		load_access_fault:														load_access_fault_exception();
		/* Execute stage */
		instruction_address_misaligned:											instruction_address_misaligned_exception();	
		illegal_instruction_execute_stage:										illegal_instruction_execute_stage_exception();
		environment_call:														environment_call_exception();	
		environment_break:														environment_break_exception();	
		/* Ifetch stage */
		instruction_address_breakpoint:											instruction_address_breakpoint_exception();
		instruction_page_fault:													instruction_page_fault_exception();
		instruction_access_fault:												instruction_access_fault_exception();
	}
	func rv32x.valid_context{
		valid_context := 1;
	}
	func abandon_context{
		valid_context := 0;
	}
	func interrupt {
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.get_pc_trap();
		abandon_context();
	}
	func exception{
		abandon_context();
	}
	func machine_external_interrupt {
		interrupt();
		trap(MACHINE, MACHINE_EXTERNAL_INTERRUPT, rv32x.epc, 0x00000000);
	}
	func machine_software_interrupt {
		interrupt();
		trap(MACHINE, MACHINE_SOFTWARE_INTERRUPT, rv32x.epc, 0x00000000);
	}
	func machine_timer_interrupt {
		interrupt();
		trap(MACHINE, MACHINE_TIMER_INTERRUPT, rv32x.epc, 0x00000000);
	}
	func supervisor_external_interrupt {
		interrupt();
		any {
			~mideleg.seip: trap(MACHINE, SUPERVISOR_EXTERNAL_INTERRUPT, rv32x.epc, 0x00000000);
			mideleg.seip: trap(SUPERVISOR, SUPERVISOR_EXTERNAL_INTERRUPT, rv32x.epc, 0x00000000);
		}
	}
	func supervisor_software_interrupt {
		interrupt();
		any {
			~mideleg.ssip: trap(MACHINE, SUPERVISOR_SOFTWARE_INTERRUPT, rv32x.epc, 0x00000000);
			mideleg.ssip: trap(SUPERVISOR, SUPERVISOR_SOFTWARE_INTERRUPT, rv32x.epc, 0x00000000);
		}
	}
	func supervisor_timer_interrupt {
		interrupt();
		any {
			~mideleg.stip: trap(MACHINE, SUPERVISOR_TIMER_INTERRUPT, rv32x.epc, 0x00000000);
			mideleg.stip: trap(SUPERVISOR, SUPERVISOR_TIMER_INTERRUPT, rv32x.epc, 0x00000000);
		}
	}
	func load_store_amo_address_breakpoint_exception {
		exception();
	}
	func store_amo_address_misaligned_exception {
		exception();
		rv32x.get_inst_execute();
		rv32x.get_pc_execute();
		trap(MACHINE, STORE_AMO_ADDRESS_MISALIGNED, rv32x.epc, rv32x.misaligned_memory_address);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
	}
	func load_address_misaligned_exception {
		exception();
		rv32x.get_inst_execute();
		rv32x.get_pc_execute();
		trap(MACHINE, LOAD_ADDRESS_MISALIGNED, rv32x.epc, rv32x.misaligned_memory_address);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
	}
	func store_amo_page_fault_exception {
		exception();
		rv32x.get_pc_memory();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		any {
			medeleg.store_amo_page_fault:	trap(SUPERVISOR, STORE_AMO_PAGE_FAULT, rv32x.epc, rv32x.daddr);
			~medeleg.store_amo_page_fault:	trap(MACHINE, STORE_AMO_PAGE_FAULT, rv32x.epc, rv32x.daddr);
		}
	}
	func load_page_fault_exception {
		exception();
		rv32x.get_pc_memory();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		any {
			medeleg.load_page_fault:	trap(SUPERVISOR, LOAD_PAGE_FAULT, rv32x.epc, rv32x.daddr);
			~medeleg.load_page_fault:	trap(MACHINE, LOAD_PAGE_FAULT, rv32x.epc, rv32x.daddr);
		}
	}
	func store_amo_access_fault_exception {
		exception();
		rv32x.get_pc_memory();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		any {
			medeleg.store_amo_access_fault: trap(SUPERVISOR, STORE_AMO_ACCESS_FAULT, rv32x.epc, rv32x.daddr);
			~medeleg.store_amo_access_fault: trap(MACHINE, STORE_AMO_ACCESS_FAULT, rv32x.epc, rv32x.daddr);
		}
	}
	func load_access_fault_exception {
		exception();
		rv32x.get_pc_memory();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
		any {
			medeleg.load_access_fault:	trap(SUPERVISOR, LOAD_ACCESS_FAULT, rv32x.epc, rv32x.daddr);
			~medeleg.load_access_fault:	trap(MACHINE, LOAD_ACCESS_FAULT, rv32x.epc, rv32x.daddr);
		}
	}
	func illegal_instruction_execute_stage_exception {
		exception();
		rv32x.get_pc_execute();
		rv32x.get_inst_execute();
		trap(MACHINE, ILLEGAL_INSTRUCTION, rv32x.epc, rv32x.einst);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
	}
	func illegal_instruction_memory_stage_exception {
		exception();
		rv32x.get_pc_memory();
		rv32x.get_inst_memory();
		trap(MACHINE, ILLEGAL_INSTRUCTION, rv32x.epc, rv32x.einst);
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.stall_memory_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
		rv32x.flush_memory();
	}
	func environment_call_exception {
		exception();
		rv32x.get_pc_execute();
		rv32x.get_inst_execute();

		any {
			(priv_mode == MACHINE): {
				trap(MACHINE, ENVIRONMENT_CALL_FROM_M_MODE, rv32x.epc, 0x00000000);
			}
			(priv_mode == SUPERVISOR) && (~medeleg.environment_call_from_s_mode): {
				trap(MACHINE, ENVIRONMENT_CALL_FROM_S_MODE, rv32x.epc, 0x00000000);
			}
			(priv_mode == SUPERVISOR) && (medeleg.environment_call_from_s_mode): {
				trap(SUPERVISOR, ENVIRONMENT_CALL_FROM_S_MODE, rv32x.epc, 0x00000000);
			}
			(priv_mode == USER) && (~medeleg.environment_call_from_u_mode): {
				trap(MACHINE, ENVIRONMENT_CALL_FROM_U_MODE, rv32x.epc, 0x00000000);
			}
			(priv_mode == USER) && (medeleg.environment_call_from_u_mode): {
				trap(SUPERVISOR, ENVIRONMENT_CALL_FROM_U_MODE, rv32x.epc, 0x00000000);
			}
		}
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
	}
	func environment_break_exception {
		any {
			~medeleg.breakpoint: {
				trap(MACHINE, BREAKPOINT, rv32x.epc, rv32x.epc);
			}
			medeleg.breakpoint: {
				trap(SUPERVISOR, BREAKPOINT, rv32x.epc, rv32x.epc);
			}
		}
		exception();
		rv32x.get_pc_execute();
		rv32x.get_inst_execute();
		rv32x.stall_ifetch_req();
		rv32x.stall_decode_req();
		rv32x.stall_execute_req();
		rv32x.flush_ifetch();
		rv32x.flush_decode();
		rv32x.flush_execute();
	}
	func instruction_address_misaligned_exception {
		any {
			~medeleg.instruction_address_misaligned: trap(MACHINE, INSTRUCTION_ADDRESS_MISALIGNED, rv32x.epc, rv32x.misaligned_target_address);
			medeleg.instruction_address_misaligned: trap(SUPERVISOR, INSTRUCTION_ADDRESS_MISALIGNED, rv32x.epc, rv32x.misaligned_target_address);
		}
		exception();
		rv32x.get_pc_execute();	
		rv32x.stall_ifetch_req();
		rv32x.flush_ifetch();
		rv32x.stall_decode_req();
		rv32x.flush_decode();
		rv32x.stall_execute_req();
		rv32x.flush_execute();
		rv32x.get_inst_execute();
	}
	func instruction_address_breakpoint_exception {
		exception();
	}
	func instruction_page_fault_exception {
		exception();
		rv32x.get_pc_ifetch();	
		rv32x.stall_ifetch_req();
		rv32x.flush_ifetch();
		any {
			medeleg.instruction_page_fault:	trap(SUPERVISOR, INSTRUCTION_PAGE_FAULT, rv32x.epc, rv32x.iaddr);
			~medeleg.instruction_page_fault:	trap(MACHINE, INSTRUCTION_PAGE_FAULT, rv32x.epc, rv32x.iaddr);
		}
	}
	func instruction_access_fault_exception {
		exception();
		rv32x.get_pc_ifetch();	
		rv32x.stall_ifetch_req();
		rv32x.flush_ifetch();
		trap(MACHINE, INSTRUCTION_ACCESS_FAULT, rv32x.epc, rv32x.iaddr);
	}
	func rv32x.mret {
		if(priv_mode != MACHINE) {
			illegal_instruction_execute_stage();
		} else {
			mtval := 0;
			trap_mret();
			rv32x.stall_ifetch_req();
			rv32x.stall_decode_req();
			rv32x.flush_ifetch();
			rv32x.flush_decode();
		}
		return mepc;
	}
	func rv32x.sret {
		if((priv_mode == SUPERVISOR) && mstatus.tsr) {
			illegal_instruction_execute_stage();
		} else {
			stval := 0;
			trap_sret();
			rv32x.stall_ifetch_req();
			rv32x.stall_decode_req();
			rv32x.flush_ifetch();
			rv32x.flush_decode();
		}
		return sepc;
	}
	proc trap_mret {
		mstatus.mie 	:= mstatus.mpie;
		mstatus.mpie	:= 1;
		mstatus.mpp		:= MACHINE;
		mstatus.mprv 	:= if(mstatus.mpp != MACHINE) 1'b0 else sstatus.mprv;
		sstatus.mprv 	:= if(mstatus.mpp != MACHINE) 1'b0 else sstatus.mprv;
		priv_mode 		:= mstatus.mpp;
		rv32x.stall_ifetch_req();
		rv32x.trap({mepc[31:2], mepc[1:0] & ~ialign});
		finish();
	}
	proc trap_sret {
		mstatus.sie		:= sstatus.spie;
		sstatus.sie		:= sstatus.spie;
		mstatus.spie	:= 1;
		sstatus.spie	:= 1;
		mstatus.mprv 	:= if(mstatus.mpp != MACHINE) 1'b0 else sstatus.mprv;
		sstatus.mprv 	:= if(mstatus.mpp != MACHINE) 1'b0 else sstatus.mprv;
		priv_mode 		:= {1'b0, sstatus.spp};	
		rv32x.stall_ifetch_req();
		rv32x.trap({sepc[31:2], sepc[1:0] & ~ialign});
		finish();
	}
	proc trap {
		wire v[32];
		mtvec_t wire tvec;
		
		any {
			trap_priv_mode == MACHINE: {
				priv_mode		:= MACHINE;
				mstatus.mpie 	:= mstatus.mie;
				mstatus.mie 	:= 0;
				mstatus.mpp 	:= priv_mode;
				mcause 			:= trap_cause;
				mepc 			:= trap_pc;
				mtval			:= trap_val;
				tvec 			= mtvec;
			}
			trap_priv_mode == SUPERVISOR: {
				priv_mode		:= SUPERVISOR;
				mstatus.spp		:= priv_mode[0];
				sstatus.spp		:= priv_mode[0];
				mstatus.spie 	:= sstatus.sie;
				sstatus.spie 	:= sstatus.sie;
				mstatus.sie		:= 0;
				sstatus.sie		:= 0;
				scause			:= trap_cause;
				sepc			:= trap_pc;
				stval			:= trap_val;
				tvec			= stvec;
			}
		}

		any {
			tvec.mode == 2'b00: 					v = {tvec.base, 2'b00};
			tvec.mode == 2'b01 && !trap_cause[31]:	v = {tvec.base, 2'b00};
			tvec.mode == 2'b01 && trap_cause[31]:	v = ({tvec.base, 2'b00} + 32'({trap_cause[9:0], 2'b00}));
		}
		rv32x.stall_ifetch_req();
		rv32x.trap(v);
		finish();
#ifdef DEBUG
		debug_raise_exception(trap_cause, trap_pc, trap_val, debug_einst);
#endif
#ifdef CV
		debug_sseg_h8({trap_cause[31:28],trap_cause[3:0]});
#endif
	}
	/* fence.i */
	func rv32x.fencei {
		if(!ic_invalidate_done) {
			ic.invalidate();
		}
		if(!lsu_cache_flush_done) {
			lsu.cache_flush();
		}
		if(lsu_cache_flush_done && ic_invalidate_done) {
			ic_invalidate_done := 0;
			lsu_cache_flush_done := 0;
			rv32x.dmem_ready();
		}
	}
	func rv32x.fence {
		rv32x.dmem_ready();
	}
	func rv32x.sfence_vma {
		if(((priv_mode == SUPERVISOR) && mstatus.tvm)) {
			illegal_instruction_memory_stage();
		} else {
			if(ic_tlb_flush_done && ic_invalidate_done && lsu_tlb_flush_done) {
				ic_tlb_flush_done := 0;
				ic_invalidate_done := 0;
				lsu_tlb_flush_done := 0;
				rv32x.dmem_ready();
			}
			if(!ic_tlb_flush_done) {
				ic.tlb_flush();
			}
			if(!ic_invalidate_done) {
				ic.invalidate();
			}
			if(!lsu_tlb_flush_done) {
				lsu.tlb_flush();
			}
		}
	}
	func ic.instruction_page_fault {
		instruction_page_fault();
	}
	func ic.instruction_access_fault {
		instruction_access_fault();
	}
	func ic.tlb_flush_done {
		ic_tlb_flush_done		:= 1;
	}
	func ic.invalidate_done {
		ic_invalidate_done 		:= 1;
	}
	func lsu.cache_flush_done {
		lsu_cache_flush_done	:= 1;
	}
	func lsu.tlb_flush_done {
		lsu_tlb_flush_done		:= 1;
	}
	func ic.mem_read {
		#define PREFETCH_BYTES 4
		reg ic_read_cnt[3] = 0;
		reg ic_prefetch_cnt[3] = 0;
		mem ic_read_data[4][32];
		if(ic_prefetch_cnt < PREFETCH_BYTES){
			imem_read({ic.mem_addr[31:4], 4'({ic_prefetch_cnt, 2'b00})}, MEM_WORD);
			ic_prefetch_cnt++;
		}
		if(ic_read_cnt == 4) {
				ic_read_cnt := 0;
				ic_prefetch_cnt := 0;
				ic.mem_rdata = {ic_read_data[3], ic_read_data[2], ic_read_data[1], ic_read_data[0]};
				ic.mem_ready();
		}
		if(imem_ready) {
			ic_read_cnt++;
			ic_read_data[ic_read_cnt] := inst;
		}
	}
	#ifdef CV
	if(SW[4]){
		any{
			ic_read_cnt[0]: debug_led_1();
			ic_read_cnt[1]: debug_led_2();
			ic_read_cnt[2]: debug_led_3();
			ic_prefetch_cnt[0]:debug_led_4();
			ic_prefetch_cnt[1]:debug_led_5();
			ic_prefetch_cnt[2]:debug_led_6();
			ic.mem_read:	debug_led_8();
			imem_ready:		debug_sseg_h12(inst[11:0]);
		}
	}
	#endif
	func ic.walk {
		lsu.read_tlb(ic.vaddr);
	}
	func lsu.pte_ready {
		ic.pte = lsu.pte;
		ic.pte_levels = lsu.pte_levels;
		ic.pte_ready();
	}
	func lsu.tlb_page_fault {
		ic.walk_page_fault();
	}
	func lsu.tlb_access_fault {
		ic.walk_access_fault();
	}
	func rv32x.imem_read {
		ic.read(rv32x.iaddr);
	}
	func ic.ready {
		rv32x.inst = ic.inst;
		rv32x.imem_ready();
	}
	func rv32x.dmem_read {
		lsu.load(rv32x.daddr, rv32x.dbyteen);
	}
	func rv32x.load_reserved {
		lsu.load_reserved();
	}
	func rv32x.amo_exe {
		lsu.amo_exe(rv32x.amo_src, rv32x.amo_addr, rv32x.amo_funct5, rv32x.amo_aq, rv32x.amo_rl, rv32x.amo_width);
	}
	func lsu.store_amo_access_fault {
		store_amo_access_fault();
	}
	func lsu.load_access_fault {
		load_access_fault();
	}
	func lsu.load_page_fault {
		load_page_fault();
	}
	func lsu.store_amo_page_fault {
		store_amo_page_fault();
	}

	/* PMAs */
	func ic.pma_check {
		imem_pma_check(ic.pma_addr);
	}
	func imem_pma_executable {
		ic.pma_executable();
	}
	func imem_pma_readable {
		ic.pma_readable();
	}
	func imem_pma_word {
		ic.pma_word();
	}
	func imem_pma_halfword {
		ic.pma_halfword();
	}
	func imem_pma_cacheable {
		ic.pma_cacheable();
	}
	func imem_pma_empty {
		ic.pma_empty();
	}
	func lsu.pma_check {
		dmem_pma_check(lsu.pma_addr);
	}
	func dmem_pma_writable {
		lsu.pma_writable();
	}
	func dmem_pma_readable {
		lsu.pma_readable();
	}
	func dmem_pma_atomic {
		lsu.pma_atomic();
	}
	func dmem_pma_word {
		lsu.pma_word();
	}
	func dmem_pma_halfword {
		lsu.pma_halfword();
	}
	func dmem_pma_byte {
		lsu.pma_byte();
	}
	func dmem_pma_cacheable {
		lsu.pma_cacheable();
	}
	func dmem_pma_empty {
		lsu.pma_empty();
	}

	func lsu.dbus_read {
		reg lsu_read_cnt[3] = 0;
		reg lsu_prefetch_cnt[3] = 0;
		mem lsu_read_data[4][32];

		if(lsu.dbus_size == MEM_QUADWORD) {
			if(lsu_prefetch_cnt < PREFETCH_BYTES){
				dmem_read({lsu.dbus_addr[31:4], 4'({lsu_prefetch_cnt, 2'b00})}, MEM_WORD);
				lsu_prefetch_cnt++;
			}
			if(lsu_read_cnt == 4) {
					lsu_read_cnt := 0;
					lsu_prefetch_cnt := 0;
					lsu.dbus_rdata = {lsu_read_data[3], lsu_read_data[2], lsu_read_data[1], lsu_read_data[0]};
					lsu.dbus_ready();
			}
			if(dmem_ready) {
				lsu_read_cnt++;
				lsu_read_data[lsu_read_cnt] := rdata;
			}
		} else {
			dmem_read(lsu.dbus_addr, lsu.dbus_size);
			if(dmem_ready) {
				lsu.dbus_rdata = 128'(rdata);
				lsu.dbus_ready();
			}
		}
	}
	func rv32x.dmem_write {
		lsu.store(rv32x.daddr, rv32x.dbyteen, rv32x.wdata);
	}
	func rv32x.store_conditional {
		lsu.store_conditional();
	}
	func lsu.dbus_write {
		reg lsu_write_cnt[3] = 0;
		
		if(lsu.dbus_size == MEM_QUADWORD) {
			any {
				lsu_write_cnt == 0: dmem_write({lsu.dbus_addr[31:4], 4'({lsu_write_cnt, 2'b00})}, MEM_WORD, lsu.dbus_wdata[31:0]);
				lsu_write_cnt == 1: dmem_write({lsu.dbus_addr[31:4], 4'({lsu_write_cnt, 2'b00})}, MEM_WORD, lsu.dbus_wdata[63:32]);
				lsu_write_cnt == 2: dmem_write({lsu.dbus_addr[31:4], 4'({lsu_write_cnt, 2'b00})}, MEM_WORD, lsu.dbus_wdata[95:64]);
				lsu_write_cnt == 3: dmem_write({lsu.dbus_addr[31:4], 4'({lsu_write_cnt, 2'b00})}, MEM_WORD, lsu.dbus_wdata[127:96]);
				lsu_write_cnt == 4: {
					lsu_write_cnt := 0;
					lsu.dbus_ready();
				}
				dmem_ready: lsu_write_cnt++;
			}
		} else {
			dmem_write(lsu.dbus_addr, lsu.dbus_size, lsu.dbus_wdata[31:0]);
			if(dmem_ready) {
				lsu.dbus_ready();
			}
		}
	}
	func lsu.ready {
		rv32x.rdata = lsu.load_data;
		rv32x.dmem_ready();
	}
#ifdef DEBUG
	debug_x0  = rv32x.debug_x0;
	debug_x1  = rv32x.debug_x1;
	debug_x2  = rv32x.debug_x2;
	debug_x3  = rv32x.debug_x3;
	debug_x4  = rv32x.debug_x4;
	debug_x5  = rv32x.debug_x5;
	debug_x6  = rv32x.debug_x6;
	debug_x7  = rv32x.debug_x7;
	debug_x8  = rv32x.debug_x8;
	debug_x9  = rv32x.debug_x9;
	debug_x10 = rv32x.debug_x10;
	debug_x11 = rv32x.debug_x11;
	debug_x12 = rv32x.debug_x12;
	debug_x13 = rv32x.debug_x13;
	debug_x14 = rv32x.debug_x14;
	debug_x15 = rv32x.debug_x15;
	debug_x16 = rv32x.debug_x16;
	debug_x17 = rv32x.debug_x17;
	debug_x18 = rv32x.debug_x18;
	debug_x19 = rv32x.debug_x19;
	debug_x20 = rv32x.debug_x20;
	debug_x21 = rv32x.debug_x21;
	debug_x22 = rv32x.debug_x22;
	debug_x23 = rv32x.debug_x23;
	debug_x24 = rv32x.debug_x24;
	debug_x25 = rv32x.debug_x25;
	debug_x26 = rv32x.debug_x26;
	debug_x27 = rv32x.debug_x27;
	debug_x28 = rv32x.debug_x28;
	debug_x29 = rv32x.debug_x29;
	debug_x30 = rv32x.debug_x30;
	debug_x31 = rv32x.debug_x31;
	debug_pc = rv32x.debug_pc;
	func rv32x.debug_retire {
		debug_retire(rv32x.debug_retire_pc, rv32x.debug_retire_inst);
	}
	func rv32x.debug_wb {
		debug_wb(rv32x.debug_wb_rd, rv32x.debug_wb_data);
	}
	func rv32x.debug_mem_write {
		debug_mem_write(rv32x.debug_mem_adrs, rv32x.debug_mem_byteen, rv32x.debug_mem_data);
	}
	func rv32x.debug_csr_write {
		debug_csr_write(rv32x.debug_csr_write_num, rv32x.debug_csr_write_data);
	}
#endif

#ifdef RISCV_TESTS
	func lsu.sim_done {
		sim_done(lsu.tohost);
	}
#endif
#ifdef CV
	rv32x.SW = SW;
	func rv32x.debug_led_1{
		debug_led_1();
	}	
	func rv32x.debug_led_2{
		debug_led_2();
	}	
	func rv32x.debug_led_3{
		debug_led_3();
	}	
	func rv32x.debug_led_4{
		debug_led_4();
	}	
	func rv32x.debug_led_5{
		debug_led_5();
	}
	func rv32x.debug_led_6{
		debug_led_6();
	}
	func rv32x.debug_led_7{
		debug_led_7();
	}
	func rv32x.debug_led_8{
		debug_led_8();
	}
	func rv32x.debug_pc_led{
		debug_pc_led(rv32x.pc_led);
	}
	func rv32x.debug_sseg_l16{
		debug_sseg_l16(rv32x.sseg_l16);
	}
	func rv32x.debug_sseg_l12{
		debug_sseg_l12(rv32x.sseg_l12);
	}
	func rv32x.debug_sseg_h12{
		debug_sseg_h12(rv32x.sseg_h12);
	}
	func ic.debug_led_1{
		debug_led_1();
	}	
	func ic.debug_led_2{
		debug_led_2();
	}	
	func ic.debug_led_3{
		debug_led_3();
	}	
	func ic.debug_led_4{
		debug_led_4();
	}	
	func ic.debug_led_5{
		debug_led_5();
	}
	func ic.debug_led_6{
		debug_led_6();
	}
	func ic.debug_led_7{
		debug_led_7();
	}
	func ic.debug_led_8{
		debug_led_8();
	}
#endif
}
