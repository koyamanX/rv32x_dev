#include "btb.h"

module btb {
	/* mem declaration below may not be inferred */
	/* branch instruction's address */
	mem btb_branch_instruction_address[32][32] = {0};	/* use full address for now, but only tag is adequate */
	/* branch instruction's target address */
	mem btb_branch_target_address[32][32] = {0};
	/* branch prediction state 
		moves if continuously miss predict twice 
		00 -> predict as not taken 
		01 -> predict as not taken 
		10 -> predict as taken 
		11 -> predict as taken 
	*/
	mem btb_branch_prediction_state[32][2] = {0};
	/* read btb contents (may be forwarded) */
	wire branch_instruction_address[32];
	wire branch_target_address[32];
	wire branch_prediction_state[2];

	wire predict_index[5];
	wire update_index[5];
	wire update_prediction_state_index[5];
	func_self update_prediction_state(update_prediction_state_index);

	predict_index = pc[4:0];
	update_index = update_branch_instruction_address[4:0];

	branch_instruction_address = btb_branch_instruction_address[predict_index];
	branch_target_address = btb_branch_target_address[predict_index];
	branch_prediction_state = btb_branch_prediction_state[predict_index];

	func predict {
		if((branch_instruction_address == pc) && ((branch_prediction_state == 2'b10) || (branch_prediction_state == 2'b11))) {
			/* hit */
			predicted_new_pc = branch_target_address;
			predict_as_taken();
		} else {
			/* miss */
			predicted_new_pc = pc;
			predict_as_not_taken();
		}
	}

	func update {
		if(!flush) {
			if((btb_branch_instruction_address[update_index] == update_branch_instruction_address)) {
				/* hit */
				update_prediction_state(update_index);
			} else {
				/* miss */
				btb_branch_prediction_state[update_index] := 2'b00;	/* reset state */
			}
			btb_branch_instruction_address[update_index] := update_branch_instruction_address;
			btb_branch_target_address[update_index] := update_branch_target_address;
		}
	}
	func update_prediction_state {
		wire prediction_state[2];
		wire new_prediction_state[2];

		prediction_state = btb_branch_prediction_state[update_prediction_state_index];
		any {
			prediction_state == 2'b00: new_prediction_state = if(taken) 2'b01 else if(not_taken) 2'b00 else prediction_state; 
			prediction_state == 2'b01: new_prediction_state = if(taken) 2'b10 else if(not_taken) 2'b00 else prediction_state; 
			prediction_state == 2'b10: new_prediction_state = if(taken) 2'b11 else if(not_taken) 2'b01 else prediction_state; 
			prediction_state == 2'b11: new_prediction_state = if(taken) 2'b11 else if(not_taken) 2'b10 else prediction_state; 
		}
		btb_branch_prediction_state[update_prediction_state_index] := new_prediction_state;
	}
	func flush {
		integer i;
		generate(i = 0; i < 32; i++) {
			btb_branch_prediction_state[i] := 2'b00;
			btb_branch_instruction_address[i] := 0x00000000;
			btb_branch_target_address[i] := 0x00000000;
		}
	}
}
