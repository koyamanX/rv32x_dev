#include "ptw.h"
#include "csr.h"
#include "opcode.h"

module ptw {
	reg levels[2];
	reg pa_pte_addr[34];
	reg va_vpn0[10];
	reg page_table_entry[32];
	proc_name idle();
	proc_name page_table_walk(levels, pa_pte_addr, va_vpn0);
	proc_name pte_check(levels, va_vpn0, page_table_entry);

	func reset {
		idle();
	}
	proc idle {
		wire satp_mode;
		wire satp_asid[9];
		wire satp_ppn[22];
		sv32_va_t wire sv32_va;

		sv32_va = vaddr;
		.{satp_mode, satp_asid, satp_ppn} = satp;
		if(walk) {
			page_table_walk(LEVELS-1, 34'({satp_ppn, sv32_va.vpn1, 2'b00}), sv32_va.vpn0);
		}
	}
	proc page_table_walk {
		mem_read(pa_pte_addr);
		if(mem_ready) {
			pte_check(levels, va_vpn0, mem_rdata);
		}
	}
	proc pte_check {
		sv32_pte_t wire sv32_pte;
		
		sv32_pte = page_table_entry;
		any {
			(sv32_pte.v && ((levels == 0) || ((sv32_pte.x || sv32_pte.w || sv32_pte.r) && !(sv32_pte.w && !sv32_pte.r)))): {
				/* Leaf PTE */
				pte_valid(page_table_entry, levels);
				idle();
			}
			(sv32_pte.v && ((levels != 0) && (!sv32_pte.x && !sv32_pte.w && !sv32_pte.r))): {
				/* non-leaf PTE, not future reserved */
				page_table_walk(levels-1, ({sv32_pte.ppn1, sv32_pte.ppn0, va_vpn0, 2'b00}), 10'(0x0));
			}
			else: {
				page_fault();
				idle();
			}
		}
	}
}
