#include "load_store_unit.h"
#include "cache.h"
#include "opcode.h"
#include "csr.h"
#include "ptw.h"

#define TLB_SIZE 32
#include "tlb.inc"

#define MEM_WORD        3'b010
#define MEM_HALFWORD    3'b001
#define MEM_BYTE        3'b000

#define PTW_FETCH		2'b00
#define PTW_LOAD		2'b10
#define PTW_STORE		2'b11
#define PTW_AMO			2'b11

#define CACHE_LOAD		2'b00
#define CACHE_STORE		2'b01
#define CACHE_AMO		2'b01

module load_store_unit {
	reg cache_addr[32];
	reg cache_wdata[32];
	reg cache_byteen[3];
	reg ptw_op[2];
	reg ptw_addr[32];
	reg cache_sc;
	reg amo_op_src[32];
	reg amo_op_addr[32];
	reg amo_op_funct5[5];
	reg amo_op_aq;
	reg amo_op_rl;
	reg amo_op_width[3];

	proc_name idle();
	proc_name flush_cache();
	proc_name read_cache(cache_addr, cache_byteen);
	proc_name write_cache(cache_addr, cache_byteen, cache_wdata, cache_sc);
	proc_name flush_tlb();
	proc_name page_table_walk(ptw_op, ptw_addr);
	proc_name amo_op_exe(amo_op_src, amo_op_addr, amo_op_funct5, amo_op_aq, amo_op_rl, amo_op_width);
	cache dcache;
	tlb_32 dtlb;
	ptw walker;

	wire translate_cache_access_type[2];
	wire translate_valid;
	wire va[32];
	wire pa[32];							/* valid on translate_valid */
	func_self translate(translate_cache_access_type, va) : translate_valid;
	reservation_t reg reservation = 0;

	wire sv32;

	integer i_;

	sv32 = (satp_mode && (priv_mode != MACHINE));

	func reset {
		reservation.valid := 0;
		dcache.reset();
		walker.reset();
		idle();
	}
	proc idle {
		wire sv32_va[32];
		wire sv32_pa[32];
		wire amo_addr_va[32];
		wire amo_addr_pa[32];

		sv32_va = addr;
		sv32_pa = pa;
		amo_addr_va = amo_addr;
		amo_addr_pa = pa;
		alt {
			cache_flush: {
				dcache.cache_flush();
				flush_cache();		
			}
			tlb_flush: {
				flush_tlb();
			}
			load: {
				if(translate(CACHE_LOAD, sv32_va)) {
					read_cache(sv32_pa, byteen);
					if(load_reserved) {
						reservation.valid := 1;
						reservation.addr := sv32_pa;
					}
				} else {
					page_table_walk(PTW_LOAD, sv32_va);
				}
			}
			store: {
				if(translate(CACHE_STORE, sv32_va)) {
					if(store_conditional && (!(reservation.valid && (reservation.addr == sv32_pa)))) {
						load_data = 32'(1'b1);
						valid();
					} else {
						write_cache(sv32_pa, byteen, store_data, store_conditional);
					}
					if(store_conditional) {
						reservation.valid := 0;
					}
				} else {
					page_table_walk(PTW_STORE, sv32_va);
				}
#ifdef DEBUG
				if(sv32_pa == 0x80001000) {
					sim_done(store_data);
				}
#endif
			}
			amo_exe: {
				if(translate(CACHE_AMO, amo_addr_va)) {
					amo_op_exe(amo_src, amo_addr_pa, amo_funct5, amo_aq, amo_rl, amo_width);
				} else {
					page_table_walk(PTW_AMO, amo_addr_va);
				}
			}
			read_utlb: {
				dtlb.access_tlb(utlb_addr[31:12]);

				if(dtlb.tlb_hit) {
					utlb_pte = dtlb.pte;
					utlb_pte_levels = dtlb.levels;
					utlb_pte_valid();
				} else {
					page_table_walk(PTW_FETCH, utlb_addr);
				}
			}
		}
	}
	func translate {
		sv32_pte_t wire sv32_pte;

		if(sv32) {
			dtlb.access_tlb(va[31:12]);
			sv32_pte = dtlb.pte;	/* valid on (tlb_hit) */
			any {
				(translate_cache_access_type == CACHE_LOAD) && dtlb.tlb_hit: {
					if(sv32_pte.v && (sv32_pte.r || (mstatus_mxr && sv32_pte.x)) && sv32_pte.a
						&& ((sv32_pte.u && ((priv_mode == USER) || ((priv_mode == SUPERVISOR) && sstatus_sum))) || (!sv32_pte.u && priv_mode != USER))) {
							return 1;
					} else {
						load_page_fault();
						return 0;
					}
				}
				(translate_cache_access_type == CACHE_STORE) && dtlb.tlb_hit: {
					if(sv32_pte.v && sv32_pte.r && sv32_pte.w && sv32_pte.a && sv32_pte.d
						&& ((sv32_pte.u && ((priv_mode == USER) || ((priv_mode == SUPERVISOR) && sstatus_sum))) || (!sv32_pte.u && priv_mode != USER))) {
							return 1;
					} else {
						store_amo_page_fault();
						return 0;
					}
				}
				else: {
					return 0;
				}
			}
			any {
				dtlb.levels == 0:	pa = {sv32_pte.ppn1[9:0], sv32_pte.ppn0, va[11:0]};
				dtlb.levels == 1:	pa = {sv32_pte.ppn1[9:0], va[21:0]};
			}
		} else {
			pa = va;
			return 1;
		}
	}
	proc flush_cache {
		dcache.cache_flush();

		if(dcache.cache_flush_done) {
			cache_flush_done();
			idle();
		}
	}
	proc flush_tlb {
		dtlb.flush();
		tlb_flush_done();
		idle();
	}
	proc read_cache {
		dcache.read(cache_addr, cache_byteen);	

		if(dcache.valid) {
			load_data = dcache.rdata;
			valid();
			idle();
		}
		if(dcache.load_access_fault) {
			idle();
		}
	}
	proc write_cache {
		dcache.write(cache_addr, cache_byteen, cache_wdata);	

		if(dcache.valid) {
			load_data = 32'(~cache_sc);
			valid();
			idle();
		}
		if(dcache.store_amo_access_fault) {
			load_data = 32'(1'b1);
			idle();
		}
	}
	proc page_table_walk {
		walker.walk({satp_mode, satp_asid, satp_ppn}, ptw_addr);

		if(walker.pte_valid) {
			dtlb.refill(ptw_addr[31:12], walker.pte_levels, walker.pte);
			idle();
		}
		if(walker.page_fault) {
			idle();
		}
		if(dcache.load_access_fault) {
			idle();
		}
	}
	proc amo_op_exe {
		state_name amo_read, amo_alu_op, amo_writeback;
		reg rs1_data[32];
		wire rs2_data[32];
		reg amo_alu_result[32];

		rs2_data = amo_op_src;
		state amo_read {
			dcache.read(amo_op_addr, amo_op_width);

			if(dcache.valid) {
				rs1_data := dcache.rdata;
				goto amo_alu_op;
			}
			if(dcache.load_access_fault) {
				/* amo access fault */
				idle();
			}
		}
		state amo_alu_op {

			any {
				amo_op_funct5 == AMOADD_W:	amo_alu_result := rs1_data + rs2_data;
				amo_op_funct5 == AMOOR_W:	amo_alu_result := rs1_data | rs2_data;
				amo_op_funct5 == AMOXOR_W:	amo_alu_result := rs1_data ^ rs2_data;
				amo_op_funct5 == AMOAND_W:	amo_alu_result := rs1_data & rs2_data;
				amo_op_funct5 == AMOSWAP_W:	amo_alu_result := rs2_data;
				amo_op_funct5 == AMOMIN_W:	amo_alu_result := if((33#(rs1_data) - 33#(rs2_data))[32]) rs1_data else rs2_data;
				amo_op_funct5 == AMOMINU_W:	amo_alu_result := if((33'(rs1_data) - 33'(rs2_data))[32]) rs1_data else rs2_data;
				amo_op_funct5 == AMOMAX_W:	amo_alu_result := if((33#(rs1_data) - 33#(rs2_data))[32]) rs2_data else rs1_data;
				amo_op_funct5 == AMOMAXU_W:	amo_alu_result := if((33'(rs1_data) - 33'(rs2_data))[32]) rs2_data else rs1_data;
			}
			goto amo_writeback;
		}
		state amo_writeback {
			dcache.write(amo_op_addr, amo_op_width, amo_alu_result);

			if(dcache.valid) {
				load_data = rs1_data;
				valid();
				goto amo_read;
				idle();
			}
			if(dcache.store_amo_access_fault) {
				goto amo_read;
				idle();
			}
		}
	}
	func walker.mem_read {
		dcache.read(walker.mem_addr[31:0], MEM_WORD);	

		if(dcache.valid) {
			walker.mem_rdata = dcache.rdata[31:0];
			walker.mem_ready();
		}
	}
	func dcache.pma_check {
		pma_check(dcache.pma_adrs);
	}
	func pma_empty {
		dcache.pma_empty();
	}
	func pma_cacheable {
		dcache.pma_cacheable();
	}
	func dcache.mem_read {
		mem_read(dcache.mem_adrs, dcache.mem_size);
	}
	func dcache.mem_write {
		mem_write(dcache.mem_adrs, dcache.mem_size, dcache.mem_wdata);
	}
	func mem_valid {
		dcache.mem_rdata = mem_rdata;
		dcache.mem_valid();
	}
	func dcache.store_amo_access_fault {
		store_amo_access_fault();
	}
	func dcache.load_access_fault {
		any {
			page_table_walk && ptw_op == PTW_FETCH: utlb_access_fault();
			amo_op_exe:								store_amo_access_fault();
			else: 									load_access_fault();
		}
	}
	func walker.page_fault {
		any {
			ptw_op == PTW_FETCH:	utlb_page_fault();
			ptw_op == PTW_STORE:	store_amo_page_fault();
			ptw_op == PTW_LOAD:		load_page_fault();
		}
	}
}
