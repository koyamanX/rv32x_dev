#include "rv32x5p.h"
#include "opcode.h"
#include "inc32.h"
#include "inst_dec.h"
#include "alu32.h"
#include "reg32.h"
#include "adder32.h"
#include "munit32.h"
#include "regs5p.h"
#include "btb.h"

module rv32x5p {
	/* Pipeline registers (see regs5.h) */
	reg PC[32];
	idreg_t reg IDREG;
	dereg_t reg DEREG;
	emreg_t reg EMREG;
	mwreg_t reg MWREG;
	/* Pipeline stages */
	proc_name ifetch(PC);
	proc_name decode(IDREG);
	proc_name execute(DEREG);
	proc_name memory(EMREG);
	proc_name writeback(MWREG);
	func_self stall_ifetch();
	func_self stall_decode();
	func_self stall_execute();
	func_self stall_memory();
	func_self load_interlock();					/* stall pipeline until load finishes */
	func_self memory_load_hazzard_a();			/* load hazzard on ALU input a */
	func_self memory_load_hazzard_b();			/* load hazzard on ALU input b */
	func_self csr_load_hazzard_a();				/* CSR load hazzard(one clock latency) on ALU input a */
	func_self csr_load_hazzard_b();				/* CSR load hazzard(one clock latency) on ALU input b */
	func_self ifetch_nop();						/* insert nop instruction in ifetch */
	func_self decode_nop();						/* insert nop instruction in decode */
	func_self execute_nop();					/* insert nop instruction in execute */
	func_self memory_nop();						/* insert nop instruction in memory */
	func_self nop();							/* no-op (indicating unimplemented instruction) */
	wire execute_alu_a[32];						/* forward-path to ALU input A in execute stage */
	wire execute_alu_b[32];						/* forward-path to ALU input B in execute stage */
	reg32 rv32x_reg32;							/* General-purpose registers(written value is forwarded to read ports 
													if rd==rs1 or rd==rs2 in same cycle) */
	munit32 rv32x_munit32;						/* Extension unit for M-Extensions, may require some cycle to complete its operations */
	btb rv32x_btb;								/* Branch prediction and branch target buffer */

	func reset {
		/* Reset Extension Unit */
		rv32x_munit32.reset();

		ifetch(resetvector);
		IDREG := 0;
		DEREG := 0;
		EMREG := 0;
		MWREG := 0;
	}
	func trap {
		/* Override current execution flow */
		ifetch(vector);
	}
	proc ifetch {
		wire pc4[32];
		wire predicted_new_pc[32];
		inc32 rv32x_inc32;

		rv32x_btb.predict(PC);
		imem_read(PC, MEM_WORD);
		pc4 = rv32x_inc32.exe(PC);
		if(rv32x_btb.predict_as_taken) {
			predicted_new_pc = rv32x_btb.predicted_new_pc;
		}
		if(rv32x_btb.predict_as_not_taken) {
			predicted_new_pc = pc4;
		}

		if(imem_valid) {
			if(!stall_ifetch) {	
#define NOP (0x00000013)
				ifetch(predicted_new_pc);
				if(ifetch_nop) {
					decode({PC, pc4, NOP, 1'b0, 1'b0});
				} else {
					/* feedback to predictor(at execute stage where actual branch condition calculates) */
					decode({PC, pc4, inst, rv32x_btb.predict_as_taken, rv32x_btb.predict_as_not_taken});
				}
			}
		}
	}
	func flush_ifetch {
		ifetch.finish();
		ifetch_nop();
	}
	/* stall request from outside enviroment(on trap) */
	func stall_ifetch_req {
		stall_ifetch();
	}
	proc decode {
		dereg_t wire dereg;
		/* decode information of system instructions */
		func_self system_csrrw;
		func_self system_csrrs;
		func_self system_csrrc;
		func_self system_mret;
		func_self system_sret;
		func_self system_uret;
		func_self system_ecall;
		func_self system_ebreak;
		func_self system_wfi;
		func_self system_sfence_vma;
		func_self system_priv;
		/* decode information of misc_mem instructions */
		func_self misc_mem_fencei;
		func_self misc_mem_fence;
		func_self misc_mem_sfence_vma;
		func_self uimm;
		/* instruction decoded is illegal */
		func_self decode_illegal_instruction;
		wire alu_a[32];			/* ALU input A */
		wire alu_b[32];			/* ALU input B */
		/* Forwarding may be taken place on ALU input a/b */
		wire alu_a_forward_en;
		wire alu_b_forward_en;
		inst_dec rv32x_inst_dec;		/* instruction decoder */
		adder32 rv32x_adder32;			/* Adder for branch target */

		/* decode and read operand from register file */
		rv32x_inst_dec.exe(IDREG.inst);
		rv32x_reg32.reada(rv32x_inst_dec.rs1);
		rv32x_reg32.readb(rv32x_inst_dec.rs2);
		/* calc branch address */
		rv32x_adder32.exe(IDREG.pc, rv32x_inst_dec.imm);

		/* condition where forwarding may be taken place on ALU a/b */
		alu_a_forward_en = if(rv32x_inst_dec.lui || rv32x_inst_dec.auipc 
								|| rv32x_inst_dec.jal) 1'b0 else 1'b1;
		alu_b_forward_en = if(rv32x_inst_dec.op 
								|| rv32x_inst_dec.branch) 1'b1 else 1'b0;

		if(!decode_nop) {
			dereg.pc = IDREG.pc;
			dereg.pc4 = IDREG.pc4;
			dereg.inst = IDREG.inst;
			dereg.alu_sel = rv32x_inst_dec.m_ext;
			dereg.alu_fn = rv32x_inst_dec.alu_fn;
			dereg.alu_a = alu_a;
			dereg.alu_b = alu_b;
			dereg.alu_a_forward_en = alu_a_forward_en;
			dereg.alu_b_forward_en = alu_b_forward_en;
			dereg.funct3 = rv32x_inst_dec.funct3;
			dereg.funct12 = rv32x_inst_dec.funct12;
			dereg.rd = rv32x_inst_dec.rd;
			dereg.rs1 = rv32x_inst_dec.rs1;
			dereg.rs2 = rv32x_inst_dec.rs2;
			dereg.rs1_data = rv32x_reg32.rdataa;
			dereg.rs2_data = rv32x_reg32.rdatab;
			dereg.load = rv32x_inst_dec.load;
			dereg.store = rv32x_inst_dec.store;
			dereg.jump = (rv32x_inst_dec.jal || rv32x_inst_dec.jalr);
			dereg.branch = rv32x_inst_dec.branch;
			dereg.beq = rv32x_inst_dec.beq;
			dereg.bne = rv32x_inst_dec.bne;
			dereg.blt = rv32x_inst_dec.blt;
			dereg.bltu = rv32x_inst_dec.bltu;
			dereg.bge = rv32x_inst_dec.bge;
			dereg.bgeu = rv32x_inst_dec.bgeu;
			dereg.nextpc = rv32x_adder32.q;
			dereg.csrrw = system_csrrw;
			dereg.csrrs = system_csrrs;
			dereg.csrrc = system_csrrc;
			dereg.uimm = uimm;
			dereg.fencei = misc_mem_fencei;
			dereg.fence = misc_mem_fence;
			dereg.sfence_vma = system_sfence_vma;
			dereg.ecall = system_ecall;
			dereg.ebreak = system_ebreak;
			dereg.mret = system_mret;
			dereg.sret = system_sret;
			dereg.uret = system_uret;
			dereg.wfi = system_wfi;
			dereg.wb = rv32x_inst_dec.wb;
			dereg.illegal_instruction = (rv32x_inst_dec.illegal_instruction || decode_illegal_instruction);
			dereg.predict_as_taken = IDREG.predict_as_taken;
			dereg.predict_as_not_taken = IDREG.predict_as_not_taken;
		} else {
			dereg = 0;
		}

		if(!stall_decode) {
			execute(dereg);
		}
	}
	func flush_decode {
		decode.finish();
		decode_nop();
	}
	func stall_decode_req {
		stall_decode();
	}
	func rv32x_inst_dec.op_imm {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;

		any {
			(rv32x_inst_dec.funct3 == ALU_SLL)
				&& (rv32x_inst_dec.imm[11:5] != 7'b0000000): decode_illegal_instruction();
			((rv32x_inst_dec.funct3 == ALU_SRA) || (rv32x_inst_dec.funct3 == ALU_SRL))
				&& ((rv32x_inst_dec.imm[11] != 1'b0) || (rv32x_inst_dec.imm[9:5] != 5'b00000)): decode_illegal_instruction();
		}
	}
	func rv32x_inst_dec.op {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_reg32.rdatab;

		any {
			((rv32x_inst_dec.funct7 != 7'b0000000)
				&& (rv32x_inst_dec.funct7 != 7'b0100000)
				&& (rv32x_inst_dec.funct7 != M_EXT)): 	decode_illegal_instruction();
		}
	}
	func rv32x_inst_dec.lui {
		alu_a = 0x00000000;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.auipc {
		alu_a = IDREG.pc;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.jal {
		alu_a = IDREG.pc;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.jalr {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.load {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.store {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.branch {
		/* Condition check */
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_reg32.rdatab;
	}
	func rv32x_inst_dec.misc_mem {
		any {
			rv32x_inst_dec.funct3 == FENCEI: {
				misc_mem_fencei();

				any {
					((rv32x_inst_dec.rs1 != 5'b00000)
						|| (rv32x_inst_dec.rd != 5'b00000)
						|| (rv32x_inst_dec.imm[11:0] != 12'b0000_0000_0000)): decode_illegal_instruction();
				}
			}
			rv32x_inst_dec.funct3 == FENCE: 	{misc_mem_fence(); /* check if illegal instruction */}
		}
	}
	func rv32x_inst_dec.system {
		alu_a = rv32x_reg32.rdataa;
		alu_b = 0x00000000;
		any {
			rv32x_inst_dec.funct3 == CSRRW:		{system_csrrw();}
			rv32x_inst_dec.funct3 == CSRRC:		{system_csrrc();}
			rv32x_inst_dec.funct3 == CSRRS:		{system_csrrs();}
			rv32x_inst_dec.funct3 == CSRRWI:	{system_csrrw(); uimm();}
			rv32x_inst_dec.funct3 == CSRRCI:	{system_csrrc(); uimm();}
			rv32x_inst_dec.funct3 == CSRRSI:	{system_csrrs(); uimm();}
			rv32x_inst_dec.funct3 == PRIV:		{system_priv();}
			else: decode_illegal_instruction();
		}
	}
	func system_priv {
		any {
			rv32x_inst_dec.funct12 == ECALL:		{system_ecall();}
			rv32x_inst_dec.funct12 == EBREAK:		{system_ebreak();}
			rv32x_inst_dec.funct12 == MRET:			{system_mret();}
			rv32x_inst_dec.funct12 == SRET:			{system_sret();}
			rv32x_inst_dec.funct12 == URET:			{system_uret();}
			rv32x_inst_dec.funct12 == WFI:			{system_wfi(); /* check if illegal */}
			rv32x_inst_dec.funct7  == SFENCE_VMA:	{system_sfence_vma();}
			else: decode_illegal_instruction();
		}

		any {
			(!system_sfence_vma
				&& ((rv32x_inst_dec.rs1 != 5'b00000) || (rv32x_inst_dec.rd != 5'b00000))): decode_illegal_instruction();
		}
	}
	func load_interlock {
		/* Execute stage cannot be executed since one of its operand is from memory (load operation),
			so stall execute, decode and ifetch until its ready to go */
		stall_ifetch();
		stall_decode();
		stall_execute();
	}
	func memory_load_hazzard_a {
		load_interlock();
	}
	func memory_load_hazzard_b {
		load_interlock();
	}
	func csr_load_hazzard_a {
		load_interlock();
	}
	func csr_load_hazzard_b {
		load_interlock();
	}
	/* Forwarding Unit */
	if((DEREG.rs1 == EMREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && EMREG.load && memory) {
		memory_load_hazzard_a();
	} else if((DEREG.rs1 == EMREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && (EMREG.csrrc || EMREG.csrrs || EMREG.csrrw) && memory) {
		csr_load_hazzard_a();
	} else if((DEREG.rs1 == EMREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && !EMREG.load && memory) {
		execute_alu_a = EMREG.alu_q;
	} else if((DEREG.rs1 == MWREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && MWREG.load && writeback) {
		execute_alu_a = MWREG.wb_value;
	} else if((DEREG.rs1 == MWREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && !MWREG.load && writeback) {
		execute_alu_a = MWREG.alu_q;
	} else {
		execute_alu_a = DEREG.alu_a;
	}
	if((DEREG.rs2 == EMREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && EMREG.load && memory) {
		memory_load_hazzard_b();
	} else if((DEREG.rs2 == EMREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && (EMREG.csrrc || EMREG.csrrs || EMREG.csrrw) && memory) {
		csr_load_hazzard_b();
	} else if((DEREG.rs2 == EMREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && !EMREG.load && memory) {
		execute_alu_b = EMREG.alu_q;
	} else if((DEREG.rs2 == MWREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && MWREG.load && writeback) {
		execute_alu_b = MWREG.wb_value;
	} else if((DEREG.rs2 == MWREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && !MWREG.load && writeback) {
		execute_alu_b = MWREG.alu_q;
	} else {
		execute_alu_b = DEREG.alu_b;
	}
	proc execute {
		emreg_t wire emreg;
		wire csr_wb_data[32];
		wire alu_q[32];
		wire target_address[32];
		func_self taken;
		wire not_taken;
		func_self condcheck;
		func_self i_misaligned;
		func_self m_misaligned;
		func_self miss_prediction;
		func_self correct_prediction;
		alu32 rv32x_alu32;

		if(!execute_nop) {
			emreg.pc = DEREG.pc;
			emreg.pc4 = DEREG.pc4;
			emreg.inst = DEREG.inst;
			emreg.funct3 = DEREG.funct3;
			emreg.funct12 = DEREG.funct12;
			emreg.rd = DEREG.rd;
			emreg.rs1 = DEREG.rs1;
			emreg.rs2 = DEREG.rs2;
			emreg.rs1_data = execute_alu_a;
			/* read data from rs2, is used for store operation so forward */
			if(DEREG.store && ((DEREG.rs2 == MWREG.rd) && (DEREG.rs2 != 5'b00000))) {
				emreg.rs2_data = MWREG.wb_value;
			} else if(DEREG.store) {
				emreg.rs2_data = DEREG.rs2_data;
			} else {
				emreg.rs2_data = execute_alu_b;
			}
			emreg.load = DEREG.load;
			emreg.store = DEREG.store;
			emreg.alu_q = if(DEREG.jump) DEREG.pc4 else alu_q;	/* address for link register */
			emreg.fencei = DEREG.fencei;
			emreg.fence = DEREG.fence;
			emreg.sfence_vma = DEREG.sfence_vma;
			emreg.wb = if(i_misaligned) 1'b0 else DEREG.wb;
			emreg.uimm = DEREG.uimm;
			emreg.csrrw = DEREG.csrrw;
			emreg.csrrs = DEREG.csrrs;
			emreg.csrrc = DEREG.csrrc;
		} else {
			emreg = 0;
		}
		target_address = if(DEREG.branch) DEREG.nextpc else alu_q;
		not_taken = (!taken && DEREG.branch);

		if(!load_interlock) {
			/* both Operands are ready */
			any {
				DEREG.alu_sel == ALU: {
					alu_q = rv32x_alu32.exe(execute_alu_a, execute_alu_b, DEREG.alu_fn);
				}
				DEREG.alu_sel == MUNIT: {
					alu_q = rv32x_munit32.exe(execute_alu_a, execute_alu_b, DEREG.alu_fn[2:0]);	
					if(!rv32x_munit32.done) {
						stall_ifetch();
						stall_decode();
						stall_execute();		/* Stall ifetch, decode */
					}
				}
				(DEREG.branch): {condcheck();}
				(DEREG.ecall): {ecall();}
				(DEREG.ebreak): {ebreak();}
				(DEREG.mret): {mret();}
				(DEREG.sret): {sret();}
				(DEREG.uret): {uret();}
				(DEREG.wfi): {wfi();}
			}
			alt {
				/* Branch and jump instructions */
				(DEREG.jump  && !stall_execute): {
					stall_ifetch();
					stall_decode();
					ifetch_nop();
					ifetch.finish();
					decode_nop();
					decode.finish();
					ifetch(target_address);
					memory(emreg);	/* for logging and update link register */
				} 
				((not_taken && DEREG.predict_as_taken) && !stall_execute): {
					miss_prediction();	/* update branch target address */
					stall_ifetch();
					stall_decode();
					ifetch_nop();
					ifetch.finish();
					decode_nop();
					decode.finish();
					ifetch(DEREG.pc4);
					memory(emreg);	/* for logging */
				}
				((taken && DEREG.predict_as_not_taken) && !stall_execute): {
					miss_prediction();	/* update branch target address */
					stall_ifetch();
					stall_decode();
					ifetch_nop();
					ifetch.finish();
					decode_nop();
					decode.finish();
					ifetch(target_address);
					memory(emreg);	/* for logging */
				}
				((taken && DEREG.predict_as_taken) || (not_taken && DEREG.predict_as_not_taken)): {
					correct_prediction();
					memory(emreg);	/* for logging */
				}
				/* ALU and M-Ext instructions */
				((DEREG.alu_sel == ALU) && !stall_execute): {
					memory(emreg);	/* for logging */
				}
				((DEREG.alu_sel == MUNIT) && rv32x_munit32.done && !stall_execute): {
					memory(emreg);	/* for logging */
				}

			}
			if((DEREG.jump || taken) && ((target_address[1:0] & ialign) != 2'b00)) {
				/* Instruction address misaligned(on target address) */
				i_misaligned();
			}
			any {
				/* Data address misaligned */
				((alu_q[1:0] != 2'b00) && ({1'b0, DEREG.funct3[1:0]} == MEM_WORD)):		m_misaligned();
				((alu_q[0] != 1'b0) && ({1'b0, DEREG.funct3[1:0]} == MEM_HALFWORD)):	m_misaligned();
			}
			/* Exceptions in execute stage */
			any {
				(DEREG.illegal_instruction):	illegal_instruction_execute_stage();
				(i_misaligned):					instruction_address_misaligned(target_address);
				(DEREG.load && m_misaligned):	load_address_misaligned(alu_q);
				(DEREG.store && m_misaligned):	store_address_misaligned(alu_q);
			}
			/* Update branch prediction */
			any {
				taken: rv32x_btb.taken();
				not_taken: rv32x_btb.not_taken();
			}
		}
	}
	func miss_prediction {
		rv32x_btb.regist(DEREG.pc, target_address);
	}
	func condcheck {
		wire eq, lt;

		eq = rv32x_alu32.z; 	/* is equal? */
		lt = rv32x_alu32.q[0]; 	/* is less than? */
		any {
			(DEREG.beq & eq): taken();
			(DEREG.bne & ~eq): taken();
			(DEREG.blt & lt): taken();
			(DEREG.bltu & lt): taken();
			(DEREG.bge & ~lt): taken();
			(DEREG.bgeu & ~lt): taken();
		}
	} 
	func flush_execute {
		execute.finish();
		execute_nop();
		rv32x_munit32.reset();	/* cancel current operation */
	}
	func stall_execute_req {
		stall_execute();
	}
	proc memory {
		mwreg_t wire mwreg;
		wire mem_adrs[32];
		wire mem_data[32];
		wire mem_byteen[3];
		wire loaded_value[32];
		func_self ext : loaded_value;
		func_self csrrw;
		func_self csrrs;
		func_self csrrc;

		if(!memory_nop) {
			mwreg.pc = EMREG.pc;
			mwreg.pc4 = EMREG.pc4;
			mwreg.inst = EMREG.inst;
			mwreg.funct12 = EMREG.funct12;
			mwreg.rd = EMREG.rd;
			mwreg.rs1 = EMREG.rs1;
			mwreg.rs2 = EMREG.rs2;
			mwreg.rs1_data = EMREG.rs1_data;
			mwreg.rs2_data = EMREG.rs2_data;
			mwreg.load = EMREG.load;
			mwreg.store = EMREG.store;
			mwreg.alu_q = if(EMREG.csrrw || EMREG.csrrc || EMREG.csrrs) crdata else EMREG.alu_q;
			mwreg.wb_value = if(EMREG.load) loaded_value else if(EMREG.csrrw || EMREG.csrrc || EMREG.csrrs) crdata else EMREG.alu_q;
			mwreg.wb = EMREG.wb;
		} else {
			mwreg = 0;
		}
		mem_byteen = {1'b0, EMREG.funct3[1:0]};
		mem_adrs = EMREG.alu_q;
		/* For store operation, forward rs2 data */
		mem_data = if((MWREG.rd == EMREG.rs2) && (EMREG.rs2 != 5'b0000)) MWREG.wb_value else EMREG.rs2_data;

		any {
			EMREG.store: {
				dmem_write(mem_adrs, mem_byteen, mem_data);
			}
			EMREG.load: {
				dmem_read(mem_adrs, mem_byteen);
			}
			EMREG.csrrw: {
				csrrw();
			}
			EMREG.csrrs: {
				csrrs();
			}
			EMREG.csrrc: {
				csrrc();
			}
			EMREG.fencei: {
				fencei();
				ifetch.finish();
				decode.finish();
				execute.finish();
				rv32x_btb.flush();
			}
			EMREG.sfence_vma: {
				sfence_vma(EMREG.rs1_data, EMREG.rs2_data[8:0]);
				ifetch.finish();
				decode.finish();
				execute.finish();
				rv32x_btb.flush();
			}
			EMREG.fence: {
				fence();
			}
		}
		alt {
			(!EMREG.store && !EMREG.load && !EMREG.fencei && !EMREG.fence && !EMREG.sfence_vma && !stall_memory): {
				writeback(mwreg);
			}
			(dmem_valid && !stall_memory && !EMREG.fencei && !EMREG.fence && !EMREG.sfence_vma): {
				ext();
				writeback(mwreg);
			}
			(dmem_valid && !stall_memory && EMREG.sfence_vma): {
				ifetch(EMREG.pc4);
				writeback(mwreg);
			}
			(dmem_valid && !stall_memory && EMREG.fence): {
				ifetch(EMREG.pc4);
				writeback(mwreg);
			}
			(dmem_valid && !stall_memory && EMREG.fencei): {
				ifetch(EMREG.pc4);
				writeback(mwreg);
			}
			else: {
				stall_ifetch();		
				stall_decode();
				stall_execute();
			}
		}
#ifdef DEBUG
		mwreg.debug_mem_adrs = mem_adrs;
		mwreg.debug_mem_byteen = mem_byteen;
		mwreg.debug_mem_data = mem_data;
		mwreg.debug_mem_write = EMREG.store;
		mwreg.debug_wb = if(memory_nop) 1'b0 else EMREG.wb;
#endif
	}
	func csrrw {
		csr_wb_data = if(EMREG.uimm) 32'(EMREG.rs1) else EMREG.rs1_data;
		if(EMREG.uimm) {
			csr_write_uimm();
		}
		if(EMREG.rd != 5'b00000) {
			csr_read(EMREG.funct12);
		}
		csr_write(EMREG.funct12, csr_wb_data);
	}
	func csrrs {
		csr_wb_data = if(EMREG.uimm) 32'(EMREG.rs1) else EMREG.rs1_data;
		csr_read(EMREG.funct12);
		if(EMREG.uimm) {
			csr_write_uimm();
		}
		if(EMREG.rs1 != 5'b00000) {
			if((csr_wb_data != 0x00000000)) {
				csr_write(EMREG.funct12, (csr_wb_data | 32'(crdata)));
			} else {
				csr_write(EMREG.funct12, 32'(crdata));
			}
		}
	}
	func csrrc {
		csr_wb_data = if(EMREG.uimm) 32'(EMREG.rs1) else EMREG.rs1_data;
		csr_read(EMREG.funct12);
		if(EMREG.uimm) {
			csr_write_uimm();
		}
		if(EMREG.rs1 != 5'b00000) {
			if((csr_wb_data != 0x00000000)) {
				csr_write(EMREG.funct12, (~csr_wb_data & 32'(crdata)));
			} else {
				csr_write(EMREG.funct12, 32'(crdata));
			}
		}
	}
	func ext {
		any {
			EMREG.funct3 == LB: return 32'({24{rdata[7]}, rdata[7:0]});
			EMREG.funct3 == LH: return 32'({16{rdata[15]}, rdata[15:0]});
			else:				return 32'(rdata);
		}
	}
	func flush_memory {
		memory_nop();
		memory.finish();
	}
	func stall_memory_req {
		stall_memory();
	}
	proc writeback {
		wire wb_value[32];
		
		wb_value = MWREG.wb_value;
		if(MWREG.wb) {
			instret();	/* not precise but for now, use this */
			rv32x_reg32.writea(MWREG.rd, wb_value);
		}
#ifdef DEBUG
		if(MWREG.debug_mem_write) {
			debug_mem_write(MWREG.debug_mem_adrs, MWREG.debug_mem_byteen, MWREG.debug_mem_data);
		}
		if(MWREG.debug_wb) {
			debug_wb(MWREG.rd, wb_value);
		}
		debug_retire(MWREG.pc, MWREG.inst);
#endif
		finish();
	}
	func get_pc_memory {
		return EMREG.pc; 
	}
	func get_pc_execute {
		return DEREG.pc;
	} 
	func get_pc_decode {
		return IDREG.pc; 
	}
	func get_pc_ifetch {
		return PC;
	}
	func get_inst_execute {
		return DEREG.inst;
	}
	func get_inst_memory {
		return EMREG.inst;
	}
#ifdef DEBUG
	debug_x0  = rv32x_reg32.debug_x0;
	debug_x1  = rv32x_reg32.debug_x1;
	debug_x2  = rv32x_reg32.debug_x2;
	debug_x3  = rv32x_reg32.debug_x3;
	debug_x4  = rv32x_reg32.debug_x4;
	debug_x5  = rv32x_reg32.debug_x5;
	debug_x6  = rv32x_reg32.debug_x6;
	debug_x7  = rv32x_reg32.debug_x7;
	debug_x8  = rv32x_reg32.debug_x8;
	debug_x9  = rv32x_reg32.debug_x9;
	debug_x10 = rv32x_reg32.debug_x10;
	debug_x11 = rv32x_reg32.debug_x11;
	debug_x12 = rv32x_reg32.debug_x12;
	debug_x13 = rv32x_reg32.debug_x13;
	debug_x14 = rv32x_reg32.debug_x14;
	debug_x15 = rv32x_reg32.debug_x15;
	debug_x16 = rv32x_reg32.debug_x16;
	debug_x17 = rv32x_reg32.debug_x17;
	debug_x18 = rv32x_reg32.debug_x18;
	debug_x19 = rv32x_reg32.debug_x19;
	debug_x20 = rv32x_reg32.debug_x20;
	debug_x21 = rv32x_reg32.debug_x21;
	debug_x22 = rv32x_reg32.debug_x22;
	debug_x23 = rv32x_reg32.debug_x23;
	debug_x24 = rv32x_reg32.debug_x24;
	debug_x25 = rv32x_reg32.debug_x25;
	debug_x26 = rv32x_reg32.debug_x26;
	debug_x27 = rv32x_reg32.debug_x27;
	debug_x28 = rv32x_reg32.debug_x28;
	debug_x29 = rv32x_reg32.debug_x29;
	debug_x30 = rv32x_reg32.debug_x30;
	debug_x31 = rv32x_reg32.debug_x31;
	debug_pc = PC;
#endif
}
