#include "rv32x5p.h"
#include "opcode.h"
#include "inc32.h"
#include "inst_dec.h"
#include "alu32.h"
#include "reg32.h"
#include "adder32.h"
#include "munit32.h"
#include "regs5p.h"
#include "btb.h"

#define EXCEPTION_OCCURRED 1'b1

module rv32x5p {
	/* Pipeline registers (see regs5.h) */
	reg PC[32];
	idreg_t reg IDREG;
	dereg_t reg DEREG;
	emreg_t reg EMREG;
	mwreg_t reg MWREG;
	/* Pipeline stages */
	proc_name ifetch(PC);
	proc_name decode(IDREG);
	proc_name execute(DEREG);
	proc_name memory(EMREG);
	proc_name writeback(MWREG);
	func_self stop_ifetch();	//prevent ifetch unit state machine transiition from idle state
	func_self stall_ifetch();
	func_self stall_decode();
	func_self stall_execute();
	func_self stall_memory();
	func_self load_interlock();					/* stall pipeline until load finishes */
	func_self memory_load_hazzard_a();			/* load hazzard on ALU input a */
	func_self memory_load_hazzard_b();			/* load hazzard on ALU input b */
	func_self csr_load_hazzard_a();				/* CSR load hazzard(one clock latency) on ALU input a */
	func_self csr_load_hazzard_b();				/* CSR load hazzard(one clock latency) on ALU input b */
	func_self ifetch_nop();						/* insert nop instruction in ifetch */
	func_self decode_nop();						/* insert nop instruction in decode */
	func_self execute_nop();					/* insert nop instruction in execute */
	func_self memory_nop();						/* insert nop instruction in memory */
	func_self nop();							/* no-op (indicating unimplemented instruction) */
	wire execute_alu_a[32];						/* forward-path to ALU input A in execute stage */
	wire execute_alu_b[32];						/* forward-path to ALU input B in execute stage */
	wire trap_ret_pc[32];						/* epc source */
	reg32 rv32x_reg32;							/* General-purpose registers(written value is forwarded to read ports 
													if rd==rs1 or rd==rs2 in same cycle) */
	munit32 rv32x_munit32;						/* Extension unit for M-Extensions, may require some cycle to complete its operations */
	btb rv32x_btb;								/* Branch prediction and branch target buffer */

	func reset {
		/* Reset Extension Unit */
		rv32x_munit32.reset();

		ifetch(resetvector);
		IDREG := 0;
		DEREG := 0;
		EMREG := 0;
		MWREG := 0;
	}
	func trap {
		/* Override current execution flow */
		ifetch(vector);
	}

	proc ifetch {
		wire pc4[32];
		wire predicted_new_pc[32];
		wire exception[5];
		reg iqueue[64];
		wire niq[64];
		reg tailp[4];
		wire ntailp[4];
		wire opsize[3];
		reg iqpc[32] = 0xFFFFFFFF;
		reg iqueue[128];
		wire re_inst[32];
		
		inc32 rv32x_inc32;
		exception = ifetch_exception;
		rv32x_btb.predict(PC);
		if(!ifetch_nop){
			if(iqpc != PC){
				imem_read(PC, MEM_QUADWORD);
			}else{
				iready();
			}
		}

		iready = imem_ready;

		if(iready && !stall_ifetch){
			iptr = PC[3:0];
			inst = 32'(iquque >> (iptr << 3));
			if(inst[1:0] == 2'b11) opsize = 4 else opsize = 2;
			if(PC[3:0] == 0xE && opsize == 4){	//DWORD inst and out of queue
				iftech(PC+2,inst[31:16]);
			}else{
				if(takeover_inst != 0){
					re_inst = {inst[15:0],takeover_inst};
				}else{
					re_inst = inst;
				}
			}
			if(ifetch_nop) {
				decode({PC, predicted_new_pc, NOP, 1'b0, 1'b0, 5'b00000});
			} else {
				/* feedback to predictor(at execute stage where actual branch condition calculates) */
				decode({PC, predicted_new_pc, re_inst, rv32x_btb.predict_as_taken, rv32x_btb.predict_as_not_taken, 5'b00000});
			}
			if(rv32x_btb.predict_as_taken) {
				predicted_new_pc = rv32x_btb.predicted_new_pc;
			}
			if(rv32x_btb.predict_as_not_taken) {
				predicted_new_pc = pc + opsize;
			}
		}

		if(imem_ready) {
			if(!stall_ifetch) {	
#define NOP (0x00000013)
				ifetch(predicted_new_pc);
				if(ifetch_nop) {
					decode({PC, pc4, NOP, 1'b0, 1'b0, 5'b00000});
				} else {
					/* feedback to predictor(at execute stage where actual branch condition calculates) */
					decode({PC, pc4, inst, rv32x_btb.predict_as_taken, rv32x_btb.predict_as_not_taken, 5'b00000});
				}
			}
		}

		if(exception[4] == EXCEPTION_OCCURRED){
			decode({PC, pc4, NOP, 1'b0, 1'b0, exception});
		}

		#ifdef CV
		if(SW[0] && imem_ready && !stall_ifetch){
			debug_led_1();
		}
		#endif
	}
	func flush_ifetch {
		ifetch.finish();
		ifetch_nop();
	}
	/* stall request from outside enviroment(on trap) */
	func stall_ifetch_req {
		stall_ifetch();
	}
	proc decode {
		dereg_t wire dereg;
		/* decode information of system instructions */
		func_self system_csrrw;
		func_self system_csrrs;
		func_self system_csrrc;
		func_self system_mret;
		func_self system_sret;
		func_self system_ecall;
		func_self system_ebreak;
		func_self system_wfi;
		func_self system_sfence_vma;
		func_self system_priv;
		/* decode information of misc_mem instructions */
		func_self misc_mem_fencei;
		func_self misc_mem_fence;
		func_self misc_mem_sfence_vma;
		func_self uimm;
		/* instruction decoded is illegal */
		func_self decode_illegal_instruction;
		wire alu_a[32];			/* ALU input A */
		wire alu_b[32];			/* ALU input B */
		/* Forwarding may be taken place on ALU input a/b */
		wire alu_a_forward_en;
		wire alu_b_forward_en;
		inst_dec rv32x_inst_dec;		/* instruction decoder */
		adder32 rv32x_adder32;			/* Adder for branch target */

		/* decode and read operand from register file */
		rv32x_inst_dec.exe(IDREG.inst);
		rv32x_reg32.reada(rv32x_inst_dec.rs1);
		rv32x_reg32.readb(rv32x_inst_dec.rs2);
		/* calc branch address */
		rv32x_adder32.exe(IDREG.pc, rv32x_inst_dec.imm);

		/* condition where forwarding may be taken place on ALU a/b */
		alu_a_forward_en = if(rv32x_inst_dec.lui || rv32x_inst_dec.auipc 
								|| rv32x_inst_dec.jal) 1'b0 else 1'b1;
		alu_b_forward_en = if(rv32x_inst_dec.op 
								|| rv32x_inst_dec.branch || rv32x_inst_dec.amo) 1'b1 else 1'b0;

		if(!decode_nop) {
			dereg.pc = IDREG.pc;
			dereg.pc4 = IDREG.pc4;
			dereg.inst = IDREG.inst;
			dereg.alu_sel = rv32x_inst_dec.m_ext;
			dereg.alu_fn = rv32x_inst_dec.alu_fn;
			dereg.alu_a = alu_a;
			dereg.alu_b = alu_b;
			dereg.alu_a_forward_en = alu_a_forward_en;
			dereg.alu_b_forward_en = alu_b_forward_en;
			dereg.funct3 = rv32x_inst_dec.funct3;
			dereg.funct7 = rv32x_inst_dec.funct7;
			dereg.funct12 = rv32x_inst_dec.funct12;
			dereg.rd = rv32x_inst_dec.rd;
			dereg.rs1 = rv32x_inst_dec.rs1;
			dereg.rs2 = rv32x_inst_dec.rs2;
			dereg.rs1_data = rv32x_reg32.rdataa;
			dereg.rs2_data = rv32x_reg32.rdatab;
			dereg.load = rv32x_inst_dec.load;
			dereg.store = rv32x_inst_dec.store;
			dereg.jump = (rv32x_inst_dec.jal || rv32x_inst_dec.jalr);
			dereg.branch = rv32x_inst_dec.branch;
			dereg.beq = rv32x_inst_dec.beq;
			dereg.bne = rv32x_inst_dec.bne;
			dereg.blt = rv32x_inst_dec.blt;
			dereg.bltu = rv32x_inst_dec.bltu;
			dereg.bge = rv32x_inst_dec.bge;
			dereg.bgeu = rv32x_inst_dec.bgeu;
			dereg.nextpc = rv32x_adder32.q;
			dereg.csrrw = system_csrrw;
			dereg.csrrs = system_csrrs;
			dereg.csrrc = system_csrrc;
			dereg.uimm = uimm;
			dereg.fencei = misc_mem_fencei;
			dereg.fence = misc_mem_fence;
			dereg.sfence_vma = system_sfence_vma;
			dereg.ecall = system_ecall;
			dereg.ebreak = system_ebreak;
			dereg.mret = system_mret;
			dereg.sret = system_sret;
			dereg.wfi = system_wfi;
			dereg.wb = rv32x_inst_dec.wb;
			dereg.illegal_instruction = (rv32x_inst_dec.illegal_instruction || decode_illegal_instruction);
			dereg.predict_as_taken = IDREG.predict_as_taken;
			dereg.predict_as_not_taken = IDREG.predict_as_not_taken;
			dereg.amo = rv32x_inst_dec.amo;
			dereg.exception = IDREG.exception;
		} else {
			dereg = 0;
		}

		if(!stall_decode) {
			execute(dereg);
		}
		#ifdef CV
		if(SW[0] && !stall_decode) {
			debug_led_2();
		}
		#endif
	}
	func flush_decode {
		decode.finish();
		decode_nop();
	}
	func stall_decode_req {
		stall_decode();
	}
	func rv32x_inst_dec.op_imm {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.op {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_reg32.rdatab;
	}
	func rv32x_inst_dec.lui {
		alu_a = 0x00000000;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.auipc {
		alu_a = IDREG.pc;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.jal {
		alu_a = IDREG.pc;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.jalr {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.load {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.store {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_inst_dec.imm;
	}
	func rv32x_inst_dec.branch {
		/* Condition check */
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_reg32.rdatab;
	}
	func rv32x_inst_dec.misc_mem {
	}
	func rv32x_inst_dec.misc_mem_fencei {
		misc_mem_fencei();
	}
	func rv32x_inst_dec.misc_mem_fence {
		misc_mem_fence();
	}
	func rv32x_inst_dec.amo {
		alu_a = rv32x_reg32.rdataa;
		alu_b = rv32x_reg32.rdatab;
	}
	func rv32x_inst_dec.system {
		alu_a = rv32x_reg32.rdataa;
		alu_b = 0x00000000;
	}
	func rv32x_inst_dec.system_csrrw {
		system_csrrw();
	}
	func rv32x_inst_dec.system_csrrc {
		system_csrrc();
	}
	func rv32x_inst_dec.system_csrrs {
		system_csrrs();
	}
	func rv32x_inst_dec.uimm {
		uimm();
	}
	func rv32x_inst_dec.system_ecall {
		system_ecall();
	}
	func rv32x_inst_dec.system_ebreak {
		system_ebreak();
	}
	func rv32x_inst_dec.system_mret {
		system_mret();
	}
	func rv32x_inst_dec.system_sret {
		system_sret();
	}
	func rv32x_inst_dec.system_wfi {
		system_wfi();
	}
	func rv32x_inst_dec.system_sfence_vma {
		system_sfence_vma();
	}
	func load_interlock {
		/* Execute stage cannot be executed since one of its operand is from memory (load operation),
			so stall execute, decode and ifetch until its ready to go */
		stall_ifetch();
		stall_decode();
		stall_execute();
	}
	func memory_load_hazzard_a {
		load_interlock();
	}
	func memory_load_hazzard_b {
		load_interlock();
	}
	func csr_load_hazzard_a {
		load_interlock();
	}
	func csr_load_hazzard_b {
		load_interlock();
	}
	/* Forwarding Unit */
	if((DEREG.rs1 == EMREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && (EMREG.load || EMREG.amo) && memory) {
		memory_load_hazzard_a();
	} else if((DEREG.rs1 == EMREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && (EMREG.csrrc || EMREG.csrrs || EMREG.csrrw) && memory) {
		csr_load_hazzard_a();
	} else if((DEREG.rs1 == EMREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && !EMREG.load && !EMREG.amo && memory) {
		execute_alu_a = EMREG.alu_q;
	} else if((DEREG.rs1 == MWREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && (MWREG.load || EMREG.amo) && writeback) {
		execute_alu_a = MWREG.wb_value;
	} else if((DEREG.rs1 == MWREG.rd) && (DEREG.alu_a_forward_en) && (DEREG.rs1 != 0) && !MWREG.load && !MWREG.amo && writeback) {
		execute_alu_a = MWREG.alu_q;
	} else {
		execute_alu_a = DEREG.alu_a;
	}
	if((DEREG.rs2 == EMREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && (EMREG.load || EMREG.amo) && memory) {
		memory_load_hazzard_b();
	} else if((DEREG.rs2 == EMREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && (EMREG.csrrc || EMREG.csrrs || EMREG.csrrw) && memory) {
		csr_load_hazzard_b();
	} else if((DEREG.rs2 == EMREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && !EMREG.load && !EMREG.amo && memory) {
		execute_alu_b = EMREG.alu_q;
	} else if((DEREG.rs2 == MWREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && (MWREG.load || MWREG.amo) && writeback) {
		execute_alu_b = MWREG.wb_value;
	} else if((DEREG.rs2 == MWREG.rd) && (DEREG.alu_b_forward_en) && (DEREG.rs2 != 0) && !MWREG.load && !MWREG.amo && writeback) {
		execute_alu_b = MWREG.alu_q;
	} else {
		execute_alu_b = DEREG.alu_b;
	}
	proc execute {
		emreg_t wire emreg;
		wire csr_wb_data[32];
		wire alu_q[32];
		wire target_address[32];
		func_self taken;
		wire not_taken;
		func_self condcheck;
		func_self i_misaligned;
		func_self m_misaligned;
		func_self a_misaligned;
		func_self miss_prediction;
		func_self correct_prediction;
		alu32 rv32x_alu32;

		if(!execute_nop) {
			emreg.pc = DEREG.pc;
			emreg.pc4 = DEREG.pc4;
			emreg.inst = DEREG.inst;
			emreg.funct3 = DEREG.funct3;
			emreg.funct7 = DEREG.funct7;
			emreg.funct12 = DEREG.funct12;
			emreg.rd = DEREG.rd;
			emreg.rs1 = DEREG.rs1;
			emreg.rs2 = DEREG.rs2;
			emreg.rs1_data = execute_alu_a;
			/* read data from rs2, is used for store operation so forward */
			if(DEREG.store && ((DEREG.rs2 == MWREG.rd) && (DEREG.rs2 != 5'b00000))) {
				emreg.rs2_data = MWREG.wb_value;
			} else if(DEREG.store) {
				emreg.rs2_data = DEREG.rs2_data;
			} else {
				emreg.rs2_data = execute_alu_b;
			}
			emreg.load = DEREG.load;
			emreg.store = DEREG.store;
			emreg.alu_q = if(DEREG.jump) DEREG.pc4 else alu_q;	/* address for link register */
			emreg.fencei = DEREG.fencei;
			emreg.fence = DEREG.fence;
			emreg.sfence_vma = DEREG.sfence_vma;
			emreg.wb = if(i_misaligned) 1'b0 else DEREG.wb;
			emreg.uimm = DEREG.uimm;
			emreg.csrrw = DEREG.csrrw;
			emreg.csrrs = DEREG.csrrs;
			emreg.csrrc = DEREG.csrrc;
			emreg.amo = DEREG.amo;
			emreg.mret = DEREG.mret;
			emreg.sret = DEREG.sret;
			emreg.exception = DEREG.exception;
			emreg.nextpc= if(taken || DEREG.jump) target_address else DEREG.pc4;
		} else {
			emreg = 0;
		}
		emreg.exception = execute_exception;
		target_address = if(DEREG.branch) DEREG.nextpc else alu_q;
		not_taken = (!taken && DEREG.branch);

		if(!load_interlock && (DEREG.exception[4] != EXCEPTION_OCCURRED)) {
			/* both Operands are ready */
			any {
				DEREG.alu_sel == ALU: {
					alu_q = rv32x_alu32.exe(execute_alu_a, execute_alu_b, DEREG.alu_fn);
				}
				DEREG.alu_sel == MUNIT: {
					alu_q = rv32x_munit32.exe(execute_alu_a, execute_alu_b, DEREG.alu_fn[2:0]);	
					if(!rv32x_munit32.done) {
						stall_ifetch();
						stall_decode();
						stall_execute();		/* Stall ifetch, decode */
					}
				}
				(DEREG.branch): {condcheck();}
				(DEREG.ecall): {ecall();}
				(DEREG.ebreak): {ebreak();}
				(DEREG.wfi): {wfi();}
				(DEREG.mret): {mret();}
				(DEREG.sret): {sret();}
			}
			any {
				(!i_misaligned && ((taken && DEREG.predict_as_not_taken) || (not_taken && DEREG.predict_as_taken))): {
					miss_prediction();	/* update branch target address */
				}
				((taken && DEREG.predict_as_taken) || (not_taken && DEREG.predict_as_not_taken)): {
					correct_prediction();
				}
			}
			if((DEREG.jump || taken) && ((target_address[1:0] & ialign) != 2'b00)) {
				/* Instruction address misaligned(on target address) */
				i_misaligned();
			}
			any {
				/* Data address misaligned */
				((alu_q[1:0] != 2'b00) && ({1'b0, DEREG.funct3[1:0]} == MEM_WORD)):			m_misaligned();
				((alu_q[0] != 1'b0) && ({1'b0, DEREG.funct3[1:0]} == MEM_HALFWORD)):		m_misaligned();
				((execute_alu_a[1:0] != 2'b00) && ({1'b0, DEREG.funct3[1:0]} == MEM_WORD)):a_misaligned();
			}
			/* Exceptions in execute stage */
			any {
				(DEREG.illegal_instruction):	illegal_instruction_execute_stage();
				(i_misaligned):					instruction_address_misaligned(target_address);
				(DEREG.load && m_misaligned):	load_address_misaligned(alu_q);
				(DEREG.store && m_misaligned):	store_address_misaligned(alu_q);
				(DEREG.amo && a_misaligned):	store_address_misaligned(execute_alu_a);
			}
			/* Update branch prediction */
			any {
				taken: rv32x_btb.taken();
				not_taken: rv32x_btb.not_taken();
			}
		}
		if(!stall_execute){
			if((emreg.exception[4] != EXCEPTION_OCCURRED) && (DEREG.jump || miss_prediction)){
				stall_ifetch();
				stall_decode();
				ifetch_nop();	//stop ifetch_unit state machine
				ifetch.finish();
				decode_nop();
				decode.finish();
				ifetch(emreg.nextpc);
			}
			memory(emreg);
		}
		#ifdef CV
			debug_sseg_l16(DEREG.pc[15:0]);
			if(SW[0] && !stall_execute) {
				debug_led_3();
			}
			if(SW[1]){
				any{
					DEREG.jump:					debug_led_1();
					DEREG.predict_as_taken:		debug_led_2();
					DEREG.predict_as_not_taken:	debug_led_3();
					taken:						debug_led_4();
					not_taken:					debug_led_5();
					DEREG.alu_sel == ALU:		debug_led_6();
					DEREG.alu_sel == MUNIT:		debug_led_7();
					rv32x_munit32.done:			debug_led_8();
				}
			}
			if(SW[2]){
				debug_sseg_l12(DEREG.pc[11:0]);
			}
			if(SW[3] && !stall_execute){
				debug_sseg_h12(DEREG.inst[31:20]);
				debug_sseg_l12(DEREG.inst[19:8]);
				any{
					DEREG.inst[7]: debug_led_8();
					DEREG.inst[6]: debug_led_7();
					DEREG.inst[5]: debug_led_6();
					DEREG.inst[4]: debug_led_5();
					DEREG.inst[3]: debug_led_4();
					DEREG.inst[2]: debug_led_3();
					DEREG.inst[1]: debug_led_2();
					DEREG.inst[0]: debug_led_1();
				}
			}
		#endif
	}
	func miss_prediction {
		rv32x_btb.update(DEREG.pc, target_address);
	}
	func condcheck {
		wire eq, lt;

		eq = rv32x_alu32.z; 	/* is equal? */
		lt = rv32x_alu32.q[0]; 	/* is less than? */
		any {
			(DEREG.beq & eq): taken();
			(DEREG.bne & ~eq): taken();
			(DEREG.blt & lt): taken();
			(DEREG.bltu & lt): taken();
			(DEREG.bge & ~lt): taken();
			(DEREG.bgeu & ~lt): taken();
		}
	} 
	func flush_execute {
		execute.finish();
		execute_nop();
		rv32x_munit32.reset();	/* cancel current operation */
	}
	func stall_execute_req {
		stall_execute();
	}
	proc memory {
		mwreg_t wire mwreg;
		wire mem_adrs[32];
		wire mem_data[32];
		wire mem_byteen[3];
		wire loaded_value[32];
		wire ordering_aq;
		wire ordering_rl;
		wire lr_w;
		wire sc_w;
		func_self ext : loaded_value;
		func_self csrrw;
		func_self csrrs;
		func_self csrrc;

		if(!memory_nop) {
			mwreg.pc = EMREG.pc;
			mwreg.pc4 = EMREG.pc4;
			mwreg.inst = EMREG.inst;
			mwreg.funct12 = EMREG.funct12;
			mwreg.rd = EMREG.rd;
			mwreg.rs1 = EMREG.rs1;
			mwreg.rs2 = EMREG.rs2;
			mwreg.rs1_data = EMREG.rs1_data;
			mwreg.rs2_data = EMREG.rs2_data;
			mwreg.load = EMREG.load;
			mwreg.store = EMREG.store;
			mwreg.alu_q = if(EMREG.csrrw || EMREG.csrrc || EMREG.csrrs) crdata else EMREG.alu_q;
			mwreg.wb_value = if(EMREG.load || EMREG.amo) loaded_value else if(EMREG.csrrw || EMREG.csrrc || EMREG.csrrs) crdata else EMREG.alu_q;
			mwreg.wb = EMREG.wb;
			mwreg.amo = EMREG.amo;
			mwreg.mret = EMREG.mret;
			mwreg.sret = EMREG.sret;
			mwreg.nextpc = EMREG.nextpc;
			mwreg.exception = EMREG.exception;
		} else {
			mwreg = 0;
		}
		mem_byteen = {1'b0, EMREG.funct3[1:0]};
		mem_adrs = EMREG.alu_q;
		/* For store operation, forward rs2 data */
		mem_data = if((MWREG.rd == EMREG.rs2) && (EMREG.rs2 != 5'b0000)) MWREG.wb_value else EMREG.rs2_data;
		ordering_aq = EMREG.funct7[1];
		ordering_rl = EMREG.funct7[0];
		lr_w = (EMREG.funct7[6:2] == LR_W) && (EMREG.rs2 == 0) && EMREG.amo;
		sc_w = (EMREG.funct7[6:2] == SC_W) && EMREG.amo;
		mwreg.exception = memory_exception;

		any {	//LARGE_CHAR.exception[4] bit positive equal to exception occured previous stage. small_char.exception[4] is includes current stage exception.
			EMREG.exception[4] != EXCEPTION_OCCURRED && EMREG.store: {
				dmem_write(mem_adrs, mem_byteen, mem_data);
			}
			EMREG.exception[4] != EXCEPTION_OCCURRED && EMREG.load: {
				dmem_read(mem_adrs, mem_byteen);
			}
			EMREG.exception[4] != EXCEPTION_OCCURRED && EMREG.amo && !(lr_w || sc_w): {
				/* daddr can be used as badaddr, so set on amo_exe */
				amo_exe(EMREG.rs2_data, EMREG.rs1_data, EMREG.funct7[6:2], ordering_aq, ordering_rl, mem_byteen, EMREG.rs1_data);
			}
			EMREG.exception[4] != EXCEPTION_OCCURRED && lr_w: {
				load_reserved();
				dmem_read(EMREG.rs1_data, mem_byteen);
			}
			EMREG.exception[4] != EXCEPTION_OCCURRED && sc_w: {
				store_conditional();
				dmem_write(EMREG.rs1_data, mem_byteen, EMREG.rs2_data);
			}
			EMREG.csrrw: {
				csrrw();
			}
			EMREG.csrrs: {
				csrrs();
			}
			EMREG.csrrc: {
				csrrc();
			}
			EMREG.fencei: {
				fencei();
				stall_ifetch();		
				stall_decode();
				stall_execute();
				ifetch.finish();
				decode.finish();
				execute.finish();
				rv32x_btb.flush();
			}
			EMREG.sfence_vma: {
				sfence_vma(EMREG.rs1_data, EMREG.rs2_data[8:0]);
				stall_ifetch();		
				stall_decode();
				stall_execute();
				ifetch.finish();
				decode.finish();
				execute.finish();
				rv32x_btb.flush();
			}
			EMREG.fence: {
				stall_ifetch();		
				stall_decode();
				stall_execute();
				ifetch.finish();
				decode.finish();
				execute.finish();
				rv32x_btb.flush();
				fence();
			}
		}
		alt {
			mwreg.exception[4] == EXCEPTION_OCCURRED: {
				writeback(mwreg);
			}
			(!EMREG.store && !EMREG.load && !EMREG.fencei && !EMREG.fence && !EMREG.sfence_vma && !EMREG.amo && !stall_memory): {
				writeback(mwreg);
				valid_context();
			}
			(dmem_ready && !stall_memory && !EMREG.fencei && !EMREG.fence && !EMREG.sfence_vma): {
				ext();
				writeback(mwreg);
				valid_context();
			}
			(dmem_ready && !stall_memory && (EMREG.sfence_vma ||  EMREG.fence || EMREG.fencei)): {
				ifetch(EMREG.pc4);
				writeback(mwreg);
				valid_context();
			}
			else: {
				stall_ifetch();		
				stall_decode();
				stall_execute();
			}
		}
		#ifdef CV
			if(SW[0] && !stall_memory) {
				debug_led_4();
			}
			if(SW[2]){
				debug_sseg_h12(EMREG.nextpc[11:0]);
			}
		#endif
	}
	func csrrw {
		csr_wb_data = if(EMREG.uimm) 32'(EMREG.rs1) else EMREG.rs1_data;
		if(EMREG.rd != 5'b00000) {
			csr_read(EMREG.funct12);
		}
		csr_write(EMREG.funct12, csr_wb_data);
	}
	func csrrs {
		csr_wb_data = if(EMREG.uimm) 32'(EMREG.rs1) else EMREG.rs1_data;
		csr_read(EMREG.funct12);
		if(EMREG.rs1 != 5'b00000) {
			if((csr_wb_data != 0x00000000)) {
				csr_write(EMREG.funct12, (csr_wb_data | 32'(crdata)));
			}
		}
	}
	func csrrc {
		csr_wb_data = if(EMREG.uimm) 32'(EMREG.rs1) else EMREG.rs1_data;
		csr_read(EMREG.funct12);
		if(EMREG.rs1 != 5'b00000) {
			if((csr_wb_data != 0x00000000)) {
				csr_write(EMREG.funct12, (~csr_wb_data & 32'(crdata)));
			}
		}
	}
	func ext {
		any {
			EMREG.funct3 == LB: return 32'({24{rdata[7]}, rdata[7:0]});
			EMREG.funct3 == LH: return 32'({16{rdata[15]}, rdata[15:0]});
			else:				return 32'(rdata);
		}
	}
	func flush_memory {
		memory_nop();
		memory.finish();
	}
	func stall_memory_req {
		stall_memory();
	}

	if(MWREG.exception[4] == EXCEPTION_OCCURRED){
		trap_ret_pc = MWREG.pc;
	}else{
		trap_ret_pc = MWREG.nextpc;
	}

	proc writeback {
		wire wb_value[32];
		wb_value = MWREG.wb_value;
		
		if(MWREG.exception[4] == EXCEPTION_OCCURRED){
			exception_req(MWREG.exception[3:0]);
		}
		any{
			(MWREG.exception[4] != EXCEPTION_OCCURRED) && MWREG.mret: trap_mret();
			(MWREG.exception[4] != EXCEPTION_OCCURRED) && MWREG.sret: trap_sret();
			((MWREG.exception[4] != EXCEPTION_OCCURRED) && MWREG.wb):{
				instret();	/* not precise but for now, use this */
				rv32x_reg32.writea(MWREG.rd, wb_value);
			}
		}
		finish();
		#ifdef CV
		if(SW[0] && MWREG.wb){
			debug_led_5();
		}
		#endif
	}

	func get_pc_memory {
		return EMREG.pc; 
	}
	func get_pc_execute {
		return DEREG.pc;
	} 
	func get_pc_decode {
		return IDREG.pc; 
	}
	func get_pc_ifetch {
		return PC;
	}
	func get_inst_execute {
		return DEREG.inst;
	}
	func get_inst_memory {
		return EMREG.inst;
	}
	func get_pc_trap{
		return trap_ret_pc;
	}
}
