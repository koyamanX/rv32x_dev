#include "pll.h"

declare altpll interface {
    param_int
		clk0_divide_by,
		clk0_duty_cycle,
		clk0_multiply_by,
		clk1_divide_by,
		clk1_duty_cycle,
		clk1_multiply_by,
		clk2_divide_by,
		clk2_duty_cycle,
		clk2_multiply_by,
		clk3_divide_by,
		clk3_duty_cycle,
		clk3_multiply_by,
		inclk0_input_frequency,
		width_clock;
    param_str
		clk0_phase_shift,
		clk1_phase_shift,
		clk2_phase_shift,
		clk3_phase_shift,
		bandwidth_type,
		compensate_clock,
		intended_device_family,
		lpm_hint,
		lpm_type,
		operation_mode,
		pll_type,
		port_activeclock,
		port_areset,
		port_clkbad0,
		port_clkbad1,
		port_clkloss,
		port_clkswitch,
		port_configupdate,
		port_fbin,
		port_inclk0,
		port_inclk1,
		port_locked,
		port_pfdena,
		port_phasecounterselect,
		port_phasedone,
		port_phasestep,
		port_phaseupdown,
		port_pllena,
		port_scanaclr,
		port_scanclk,
		port_scanclkena,
		port_scandata,
		port_scandataout,
		port_scandone,
		port_scanread,
		port_scanwrite,
		port_clk0,
		port_clk1,
		port_clk2,
		port_clk3,
		port_clk4,
		port_clk5,
		port_clkena0,
		port_clkena1,
		port_clkena2,
		port_clkena3,
		port_clkena4,
		port_clkena5,
		port_extclk0,
		port_extclk1,
		port_extclk2,
		port_extclk3,
		self_reset_on_loss_lock;
    input areset;
    input inclk[2];
    output clk[5];
    output locked;
    // output activeclock;
    // output clkbad;
    input clkena[6];
    // output clkloss;
    input clkswitch;
    input configupdate;
    // output enable0;
    // output enable1;
    // output extclk;
    input extclkena[4];
    input fbin;
    // inout fbmimicbidir;
    // output fbout;
    // output fref;
    // output icdrclk;
    input pfdena;
    input phasecounterselect[4];
    // output phasedone;
    input phasestep;
    input phaseupdown;
    input pllena;
    input scanaclr;
    input scanclk;
    input scanclkena;
    input scandata;
    // output scandataout;
    // output scandone;
    input scanread;
    input scanwrite;
    // output sclkout0;
    // output sclkout1;
    // output vcooverrange;
    // output vcounderrange;
}

module xpll {

	altpll	altpll_component (
		clk0_divide_by = 1,
		clk0_duty_cycle = 50,
		clk0_multiply_by = 2,
		clk1_divide_by = 1,
		clk1_duty_cycle = 50,
		clk1_multiply_by = 2,
		clk2_divide_by = 5,
		clk2_duty_cycle = 50,
		clk2_multiply_by = 4,
		clk3_divide_by = PLL_DIV,
		clk3_duty_cycle = 50,
		clk3_multiply_by = PLL_MUL,
		inclk0_input_frequency = 20000,
		width_clock = 5,
		clk0_phase_shift = "0",
		clk1_phase_shift = "-1500",
		clk2_phase_shift = "0",
		clk3_phase_shift = "0",
		bandwidth_type = "AUTO",
		compensate_clock = "CLK0",
		intended_device_family = "MAX 10",
		lpm_hint = "CBX_MODULE_PREFIX=test",
		lpm_type = "altpll",
		operation_mode = "NORMAL",
		pll_type = "AUTO",
		port_activeclock = "PORT_UNUSED",
		port_areset = "PORT_USED",
		port_clkbad0 = "PORT_UNUSED",
		port_clkbad1 = "PORT_UNUSED",
		port_clkloss = "PORT_UNUSED",
		port_clkswitch = "PORT_UNUSED",
		port_configupdate = "PORT_UNUSED",
		port_fbin = "PORT_UNUSED",
		port_inclk0 = "PORT_USED",
		port_inclk1 = "PORT_UNUSED",
		port_locked = "PORT_USED",
		port_pfdena = "PORT_UNUSED",
		port_phasecounterselect = "PORT_UNUSED",
		port_phasedone = "PORT_UNUSED",
		port_phasestep = "PORT_UNUSED",
		port_phaseupdown = "PORT_UNUSED",
		port_pllena = "PORT_UNUSED",
		port_scanaclr = "PORT_UNUSED",
		port_scanclk = "PORT_UNUSED",
		port_scanclkena = "PORT_UNUSED",
		port_scandata = "PORT_UNUSED",
		port_scandataout = "PORT_UNUSED",
		port_scandone = "PORT_UNUSED",
		port_scanread = "PORT_UNUSED",
		port_scanwrite = "PORT_UNUSED",
		port_clk0 = "PORT_USED",
		port_clk1 = "PORT_USED",
		port_clk2 = "PORT_USED",
		port_clk3 = "PORT_USED",
		port_clk4 = "PORT_UNUSED",
		port_clk5 = "PORT_UNUSED",
		port_clkena0 = "PORT_UNUSED",
		port_clkena1 = "PORT_UNUSED",
		port_clkena2 = "PORT_UNUSED",
		port_clkena3 = "PORT_UNUSED",
		port_clkena4 = "PORT_UNUSED",
		port_clkena5 = "PORT_UNUSED",
		port_extclk0 = "PORT_UNUSED",
		port_extclk1 = "PORT_UNUSED",
		port_extclk2 = "PORT_UNUSED",
		port_extclk3 = "PORT_UNUSED",
		self_reset_on_loss_lock = "OFF");

    locked = altpll_component.locked;
    c0 = altpll_component.clk[0];
    c1 = altpll_component.clk[1];
    c2 = altpll_component.clk[2];
    c3 = altpll_component.clk[3];
    altpll_component.inclk={1'h0,inclk0};

    altpll_component.areset=areset;
    altpll_component.clkena=6'(1'b1);
    altpll_component.clkswitch=1'b0;
    altpll_component.configupdate=1'b0;
    altpll_component.extclkena=4'(1'b1);
    altpll_component.fbin=1'b1;
    altpll_component.pfdena=1'b1;
    altpll_component.phasecounterselect=4'(1'b1);
    altpll_component.phasestep=1'b1;
    altpll_component.phaseupdown=1'b1;
    altpll_component.pllena=1'b1;
    altpll_component.scanaclr=1'b1;
    altpll_component.scanclk=1'b0;
    altpll_component.scanclkena=1'b1;
    altpll_component.scandata=1'b0;
    altpll_component.scanread=1'b0;
    altpll_component.scanwrite=1'b0;
}

module pll{
	xpll pll_i;

	pll_i.areset = reset;
	pll_i.inclk0 = refclk;
	sdrctr_clk = pll_i.c0;
	sdram_clk = pll_i.c1;
	mmc_clk = pll_i.c2;
	cpu_clk = pll_i.c3;
	locked = pll_i.locked;
}