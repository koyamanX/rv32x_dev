#include "rv32x_integration.h"
//#include "bram_ctr.h"
#include "tcm.h"

declare top_bram{
    output SCLK;
    input MISO;
    output MOSI;
    output CS;
    input TXD;
    output RXD;
	output LEDR[9];
}

module top_bram {
    func_self reset();
	func_self conflict();
	reg led[9] = 0;

	rv32x_integration core;
    tcm bram(filename="program.hex");
	
	RXD = core.TXD;
	core.RXD = TXD;
	SCLK = core.SCLK;
	CS = core.CS;
	MOSI = core.MOSI;
	core.MISO = MISO;
	LEDR = led;
	if(~p_reset){
		reset();
	}


	func reset {
		bram.reset();
		core.reset();
	}
	func core.imem_read {
		if(!conflict){
			bram.read(core.iaddr, core.ibyteen, IMEM);
			led++;
		}
	}
	func core.dmem_read {
		conflict();
		bram.read(core.daddr, core.dbyteen, DMEM);
		//led := 9'b000000010;
	}
	func core.dmem_write {
		conflict();
		bram.write(core.daddr, core.dbyteen, core.wdata);
		//led := 9'b000000100;
	}
	func bram.iready {
		core.inst = bram.rdata;
		core.imem_ready();
	}
	func bram.dready {
		core.rdata = bram.rdata;
		core.dmem_ready();
	}
}