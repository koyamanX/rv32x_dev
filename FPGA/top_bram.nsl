#include "rv32x_integration.h"
#include "../mem/bram_ctr.h"
#include "top_bram.h"

module top_bram {
    func_self reset();
	func_self conflict();
	func_self init_sseg();
	reg led[10] = 0;
	reg cnt[10] = 0;
	mem sseg[6][7];
	mem encode[16][7];/*={0b1111110, 0b0110000, 0b1101101, 0b1111001,
						0b0110011, 0b1011011, 0b1011111, 0b1110000,
						0b1111111, 0b1111011, 0b1110111, 0b0011111,
						0b1001110, 0b0111101, 0b1001111, 0b1000111};*/

	rv32x_integration core;
    bram_ctr bram;
	
	TXD = core.TXD;
	core.RXD = RXD;
	SCLK = core.SCLK;
	CS = core.CS;
	MOSI = core.MOSI;
	core.MISO = MISO;
	LEDR = led;
	HEX0 = sseg[0];
	HEX1 = sseg[1];
	HEX2 = sseg[2];
	HEX3 = sseg[3];
	HEX4 = sseg[4];
	HEX5 = sseg[5];

	any{
		cnt == 1: reset();
		cnt < 5: cnt++;
	}

	func reset {
		//bram.reset();
		core.reset();
		init_sseg();
	}
	func init_sseg{
		integer i;
		generate(i=0;i<6;i++){
			sseg[i] := 0b1111111;
		}
		encode[0] := 0b1000000;
		encode[1] := 0b1111001;
		encode[2] := 0b0100100;
		encode[3] := 0b0110000;
		encode[4] := 0b0011001;
		encode[5] := 0b0010010;
		encode[6] := 0b0000010;
		encode[7] := 0b1111000;
		encode[8] := 0b0000000;
		encode[9] := 0b0010000;
		encode[10] := 0b0001000;
		encode[11] := 0b0000011;
		encode[12] := 0b1000110;
		encode[13] := 0b0100001;
		encode[14] := 0b0000110;
		encode[15] := 0b0001110;
	}
	func core.imem_read {
		if(!conflict){
			bram.read(core.iaddr, core.ibyteen, IMEM);
		}
	}
	func core.dmem_read {
		conflict();
		bram.read(core.daddr, core.dbyteen, DMEM);
		//led := 9'b000000010;
	}
	func core.dmem_write {
		conflict();
		bram.write(core.daddr, core.dbyteen, core.wdata);
		//led := 9'b000000100;
	}
	func bram.iready {
		core.inst = bram.rdata;
		core.imem_ready();
	}
	func bram.dready {
		core.rdata = bram.rdata;
		core.dmem_ready();
	}
	#ifdef RISCV_TESTS
	func core.sim_done {
		led :=10'(0x2AA);
	}
	#endif
	#ifdef CV
	func core.debug_led_1{
		led := led | 10'(0x002);
	}
	func core.debug_led_2{
		led := led | 10'(0x004);
	}
	func core.debug_led_3{
		led := led | 10'(0x008);
	}
	func core.debug_led_4{
		led := led | 10'(0x010);
	}
	func core.debug_led_5{
		led := led | 10'(0x020);
	}
	func core.debug_led_6{
		led := led | 10'(0x040);
	}
	func core.debug_led_7{
		led := led | 10'(0x080);
	}
	func core.debug_led_8{
		led := led | 10'(0x100);
	}
	func core.debug_pc_led{
		led := core.pc_led;
	}
	func core.debug_sseg_h8{
		sseg[5] := encode[core.sseg_h8[7:4]];
		sseg[4] := encode[core.sseg_h8[3:0]];
	}
	func core.debug_sseg_l16{
		sseg[3] := encode[core.sseg_l16[15:12]];
		sseg[2] := encode[core.sseg_l16[11:8]];
		sseg[1] := encode[core.sseg_l16[7:4]];
		sseg[0] := encode[core.sseg_l16[3:0]];
	}
	#endif
}