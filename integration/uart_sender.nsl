#include "uart_sender.h"
#include "fifo_8_8.h"

module uart_sender {
	reg buffer[8];
	reg readbuffer[8];
	reg cnt[32] = 0;
	reg txd = 1;
	reg idx[3] = 0;
	fifo_8_8 fifo;
	proc_name idle();
	proc_name send_start_bit(buffer);
	proc_name send_data_bit(buffer);
	proc_name send_stop_bit;
	proc_name wait_some_cycle();
	uart_tx_stat_t reg status = 0;

	TXD = txd;
	status.empty := fifo.empty;
	status.full := fifo.full;

	func reset {
		idle();
	}
	if(fifo.empty && status.en) {
		interrupt_req();
	}
	proc idle {
		if(status.en && ~status.busy && ~fifo.empty) {
			status.busy := 1;
			send_start_bit(fifo.read());	
			readbuffer := fifo.rdata;
		}
	}
	proc send_start_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			cnt := 0;
			send_data_bit(buffer);
		} else {
			cnt++;
		}
		txd := 0;
	}
	proc send_data_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			if(idx == 7) {
				send_stop_bit();
				idx := 0;
			} else {
				idx++;
			}
			cnt := 0;
		} else {
			cnt++;
		}
		txd := buffer[idx];
	}
	proc send_stop_bit {
		if(cnt == TX_BAUD_RATE_CNT) {
			cnt := 0;
			wait_some_cycle();
		} else {
			cnt++;
		}
		txd := 1;
	}
	proc wait_some_cycle {
		if(cnt == 0xf) {
			cnt := 0;
			idle();
			done();
			status.busy := 0;
		} else {
			cnt++;
		}
	}
	
	func read {
		any {
			addr == 10'(0x0): {rdata = 32'(readbuffer); ready();}
			addr == 10'(0x4): {rdata =  32'(status); ready();}
			else: ready();
		}
	}
	func write {
		any {
			addr == 10'(0x0): {fifo.write(wdata[7:0]); ready();}
			addr == 10'(0x4): {status.en := wdata[0]; ready();}
			else: ready();
		}
	}
}
